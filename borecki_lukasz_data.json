{"username":"borecki_lukasz","email":"borecki.lukasz@gmail.com","school":"Silesian Technical University of Gliwice","country":"Poland","company":"W-locate","name":"Lukasz Borecki","city":"Skrzyszow","website":"","job_title":"","github_url":"https://github.com/lukebor","gh_uid":"57598625","personal_first_name":"Lukasz","personal_last_name":"Borecki","hacker_school_additional":[{"name":"Silesian Technical University of Gliwice","represented":True,"options":[{"from_year":"2003","to_year":"2009","program":"Electrical Engineering \u0026 Computer Science","degree":"MS"}]}],"hacker_company_additional":[{"name":"W-locate","options":[{"from_year":"2010","to_year":"","job_title":"Specialist in IT Team"}]}],"timezone":"Europe/Warsaw","state_id":0,"is_professional":True,"jobs_prefered_roles":["Data Analyst"],"jobs_top_skills":"python,oracle,sql","preferred_lang":"python3","hackos":1291,"favorite_challenges":[],"challenges_created":[],"other_emails":[],"all_schools":[{"name":"Silesian Technical University of Gliwice","program":"Electrical Engineering \u0026 Computer Science","degree":"MS"}],"snippets":[],"submissions":[{"contest":"Master","challenge":"Solve Me First","code":"\n\ndef solveMeFirst(a,b):\n\t# Hint: Type return a+b below\n    return a+b\n\nnum1 = int(input())\nnum2 = int(input())\nres = solveMeFirst(num1,num2)\nprint(res)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Let's Echo","code":"echo \"HELLO\"","score":1.0,"language":"bash"},{"contest":"Master","challenge":"Simple Array Sum","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the simpleArraySum function below.\n#\ndef simpleArraySum(ar):\n    #\n    # Write your code here.\n    #\n    return sum(ar)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = simpleArraySum(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    return [1 for i in range(0,3) if a[i]!=b[i]]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    c=[]\n    for i in range (0,2):\n        if a[i]!=b[i]: c.append(1)\n    return c\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    c=[]\n    for i in range (0,3):\n        if a[i]!=b[i]: c.append(1)\n    return c\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    c=[]\n    for i in range (0,3):\n        if a[i]!=b[i]: c.append(1)\n    if sum(c): return c else: return None\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    c=[]\n    for i in range (0,3):\n        if a[i]!=b[i]: c.append(1)\n    if sum(c): return c\n    else: return None\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    c=[0,0]\n    for i in range (0,3):\n        if a[i]\u003eb[i]: c[0]+=1\n        if a[i]\u003cb[1]: c[1]+=1\n    return c\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.4,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    c=[0,0]\n    for i in range(len(a)):\n        if a[i]\u003eb[i]: c[0]+=1\n        if a[i]\u003cb[1]: c[1]+=1\n    return c\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.4,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    c=[0,0]\n    for i in range(0,len(a)):\n        if a[i]\u003eb[i]: c[0]+=1\n        if a[i]\u003cb[i]: c[1]+=1\n    return c\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compare the Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(a, b):\n    c=[0,0]\n    for i in range(0,len(a)):\n        if a[i]\u003eb[i]: c[0]+=1\n        if a[i]\u003cb[i]: c[1]+=1\n        else: pass\n    return c\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    result = solve(a, b)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"A Very Big Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the aVeryBigSum function below.\ndef aVeryBigSum(ar):\n    return sum(ar)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = aVeryBigSum(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Diagonal Difference","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the diagonalDifference function below.\ndef diagonalDifference(arr):\n    sum=0\n    for i in range(len(arr[0])):\n        sum=abs(sum+arr[i][i]-arr[i][n-i-1])\n    \n    return sum\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    arr = []\n\n    for _ in range(n):\n        arr.append(list(map(int, input().rstrip().split())))\n\n    result = diagonalDifference(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.6,"language":"python3"},{"contest":"Master","challenge":"Diagonal Difference","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the diagonalDifference function below.\ndef diagonalDifference(arr):\n    sum=0\n    for i in range(len(arr[0])):\n        sum=sum+arr[i][i]-arr[i][n-i-1]\n    \n    return abs(sum)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    arr = []\n\n    for _ in range(n):\n        arr.append(list(map(int, input().rstrip().split())))\n\n    result = diagonalDifference(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Plus Minus","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the plusMinus function below.\ndef plusMinus(arr):\n    result=[]\n    pos,neg,zero=0,0,0\n    for i in range(n):\n        if arr[i]\u003e0: pos+=1\n        if arr[i]\u003c0: neg+=1 \n        if arr[i]==0: zero+=1\n    print('{:0.6f}'.format(pos/n),'\\n''{:0.6f}'.format(neg/n),'\\n''{:0.6f}'.format(zero/n))\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    plusMinus(arr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Plus Minus","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the plusMinus function below.\ndef plusMinus(arr):\n    result=[]\n    pos,neg,zero=0,0,0\n    for i in range(n):\n        if arr[i]\u003e0: pos+=1\n        if arr[i]\u003c0: neg+=1 \n        if arr[i]==0: zero+=1\n    print('{:0.6f}'.format(pos/n),'\\n''{:0.6f}'.format(neg/n),'\\n''{:0.6f}'.format(zero/n))\n\nif __name__ == '__main__':\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    plusMinus(arr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Staircase","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the staircase function below.\ndef staircase(n):\n    for i in range(0,n):\n        if i==n-1:\n            print('#'*(i+1))\n        else: print(' '*(n-i-2),'#'*(i+1))\nif __name__ == '__main__':\n    n = int(input())\n\n    staircase(n)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Mini-Max Sum","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the miniMaxSum function below.\ndef miniMaxSum(arr):\n    print(sum(arr)-max(arr),sum(arr)-min(arr))\nif __name__ == '__main__':\n    arr = list(map(int, input().rstrip().split()))\n\n    miniMaxSum(arr)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Birthday Cake Candles","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the birthdayCakeCandles function below.\ndef birthdayCakeCandles(ar):\n   return ar.count(max(ar))\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = birthdayCakeCandles(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    #\n    # Write your code here.\n    #\n    return s[:-2] if s[-2:] == \"AM\" else str(int(s[:2]) + 12) + s[2:8]\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.555555555556,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    #\n    # Write your code here.\n    #\n    if s[-2:]=='AM' and s[:2]!='12':\n        return s[:-2]\n    elif s[-2:]=='AM' and s[:2]=='12':\n        return '00'+s[2:8]\n    else: return str(int(s[:2]) + 12) + s[2:8]\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":0.888888888889,"language":"python3"},{"contest":"Master","challenge":"Time Conversion","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the timeConversion function below.\n#\ndef timeConversion(s):\n    #\n    # Write your code here.\n    #\n    if s[-2:]=='AM' and s[:2]!='12':\n        return s[:-2]\n    elif s[-2:]=='AM' and s[:2]=='12':\n        return '00'+s[2:8]\n    elif s[-2:]=='PM' and s[:2]=='12':\n        return s[:-2]\n    else: return str(int(s[:2]) + 12) + s[2:8]\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = timeConversion(s)\n\n    f.write(result + '\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Grading Students","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the gradingStudents function below.\n#\ndef gradingStudents(grades):\n    res=[]\n    for i in range(n):\n        if grades[i]\u003c 38: res.append(grades[i])\n        elif grades[i]%5 \u003e2: res.append(grades[i]+5-grades[i]%5)\n        else: res.append(grades[i])\n        \n    return res\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    grades = []\n\n    for _ in range(n):\n        grades_item = int(input())\n        grades.append(grades_item)\n\n    result = gradingStudents(grades)\n\n    f.write('\\n'.join(map(str, result)))\n    f.write('\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Apple and Orange","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countApplesAndOranges function below.\ndef countApplesAndOranges(s, t, a, b, apples, oranges):\n    app,ora=0,0\n    res=[]\n    for i in apples:\n        if a+i\u003e=s and a+i\u003c=t:\n            app+=1\n    for i in oranges:\n        if b+i\u003e=s and b+i\u003c=t:\n            ora+=1\n    print(str(app)+'\\n'+str(ora))\n\nif __name__ == '__main__':\n    st = input().split()\n\n    s = int(st[0])\n\n    t = int(st[1])\n\n    ab = input().split()\n\n    a = int(ab[0])\n\n    b = int(ab[1])\n\n    mn = input().split()\n\n    m = int(mn[0])\n\n    n = int(mn[1])\n\n    apples = list(map(int, input().rstrip().split()))\n\n    oranges = list(map(int, input().rstrip().split()))\n\n    countApplesAndOranges(s, t, a, b, apples, oranges)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Kangaroo","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the kangaroo function below.\ndef kangaroo(x1, v1, x2, v2):\n    res=''\n    flag=0\n    while x1\u003cx2 and v1\u003ev2:\n        x1+=v1\n        x2+=v2\n        if x1==x2:\n            res='YES'\n            flag=1\n            break\n    while x2\u003ex1 and v1\u003ev2:\n        x1+=v1\n        x2+=v2\n        if x1==x2:\n            res='YES'\n            flag=1\n            break\n    if not flag: res='NO'\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    x1V1X2V2 = input().split()\n\n    x1 = int(x1V1X2V2[0])\n\n    v1 = int(x1V1X2V2[1])\n\n    x2 = int(x1V1X2V2[2])\n\n    v2 = int(x1V1X2V2[3])\n\n    result = kangaroo(x1, v1, x2, v2)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Between Two Sets","code":"#!/bin/python3\n\nimport os\nimport sys\nfrom fractions import gcd\n#\n# Complete the getTotalX function below.\n#\ndef getTotalX(a, b):\n    #\n    # Write your code here.\n    #\n    x=a[0]\n    y=b[0]\n    res=0\n    if len(a)\u003e1:\n        for i in range(1,len(a)):\n            x=int((x*a[i])/(gcd(x,a[i])))\n    if len(b)\u003e1:\n        for i in range(1,len(b)):\n            y=gcd(y,b[i])\n            print(y)\n    for i in range(x,y+1,x):\n        if not y%i:\n            res+=1\n    return res\nif __name__ == '__main__':\n    f = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    a = list(map(int, input().rstrip().split()))\n\n    b = list(map(int, input().rstrip().split()))\n\n    total = getTotalX(a, b)\n\n    f.write(str(total) + '\\n')\n\n    f.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Breaking the Records","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the breakingRecords function below.\ndef breakingRecords(scores):\n    min_score=max_score=scores[0]\n    r_min=r_max=0\n    res=[]\n    for i in scores:\n        if i \u003c min_score:\n            r_min+=1\n            min_score=i\n        if i \u003e max_score:\n            r_max+=1\n            max_score=i\n    res.append(r_max)\n    res.append(r_min)\n    return res\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    result = breakingRecords(scores)\n\n    fptr.write(' '.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Looping and Skipping","code":"for i in {1..99..2}\ndo\n   echo \"$i\"\ndone","score":1.0,"language":"bash"},{"contest":"Master","challenge":"A Personalized Echo","code":"read name\necho \"Welcome $name\"","score":1.0,"language":"bash"},{"contest":"Master","challenge":"Looping with Numbers","code":"for i in {1..50}\n    do\n        echo $i\n    done","score":1.0,"language":"bash"},{"contest":"Master","challenge":"The World of Numbers","code":"read x\nread y\necho `expr $x + $y`\necho `expr $x - $y`\necho `expr $x \\* $y`\necho `expr $x / $y`","score":1.0,"language":"bash"},{"contest":"Master","challenge":"Birthday Chocolate","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(s, d, m):\n    res=0\n    if m\u003c=len(s):\n        for i in range(len(s)-m+1):\n            res+=int(sum(s[i:i+m])==d)\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = list(map(int, input().rstrip().split()))\n\n    dm = input().split()\n\n    d = int(dm[0])\n\n    m = int(dm[1])\n\n    result = solve(s, d, m)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Divisible Sum Pairs","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the divisibleSumPairs function below.\ndef divisibleSumPairs(n, k, ar):\n    res=0\n    for i in range(n):\n        for j in range(n):\n            if i\u003cj and not (ar[i]+ar[j])%k:\n                res+=1\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = divisibleSumPairs(n, k, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Migratory Birds","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the migratoryBirds function below.\ndef migratoryBirds(ar):\n    a=[]\n    for i in range(1,6):\n        a.append(ar.count(i))\n    return a.index(max(a))+1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ar_count = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = migratoryBirds(ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Day of the Programmer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(year):\n    if not year%400:\n        return (\"12.09.\"+str(year))\n    elif not year%100:# and year\u003e1917:\n        return (\"12.09.\"+str(year))\n    #elif not year%100:\n     #   return (\"13.09.\"+str(year))\n    elif not year%4:\n        return (\"12.09.\"+str(year))\n    elif year==1918:\n        return (\"27.09.\"+str(year))\n    else:\n        return (\"13.09.\"+str(year))\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    year = int(input())\n\n    result = solve(year)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.66,"language":"python3"},{"contest":"Master","challenge":"Day of the Programmer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(year):\n    if not year%400:\n        return (\"12.09.\"+str(year))\n    elif not year%100 and year\u003c1918:\n        return (\"12.09.\"+str(year))\n    elif not year%100:\n        return (\"13.09.\"+str(year))\n    elif not year%4:\n        return (\"12.09.\"+str(year))\n    elif year==1918:\n        return (\"27.09.\"+str(year))\n    else:\n        return (\"13.09.\"+str(year))\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    year = int(input())\n\n    result = solve(year)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.9,"language":"python3"},{"contest":"Master","challenge":"Day of the Programmer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the solve function below.\ndef solve(year):\n    if not year%400:\n        return (\"12.09.\"+str(year))\n    elif not year%100 and year\u003c1918:\n        return (\"12.09.\"+str(year))\n    elif not year%100:\n        return (\"13.09.\"+str(year))\n    elif not year%4:\n        return (\"12.09.\"+str(year))\n    elif year==1918:\n        return (\"26.09.\"+str(year))\n    else:\n        return (\"13.09.\"+str(year))\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    year = int(input())\n\n    result = solve(year)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Bon Appétit","code":"# Enter your code here. Read input from STDIN. Print output to STDOUT\n\n\n\nimport sys\nsuma=0\nnk = list(map(int, input().rstrip().split()))\nn=nk[0]\nk=nk[1]\nar = list(map(int, input().rstrip().split()))\nb=int(input())\n#print(ar)\nsuma=int(b-(sum(ar)-ar[k])/2)\nif not suma:\n    print('Bon Appetit')\nelse: print(suma)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sock Merchant","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the sockMerchant function below.\ndef sockMerchant(n, ar):\n    socks=[]\n    res=0\n    for i in ar:\n        if i not in socks:\n            socks.append(i)\n            res+=ar.count(i)//2\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    ar = list(map(int, input().rstrip().split()))\n\n    result = sockMerchant(n, ar)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Drawing Book ","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the pageCount function below.\n#\ndef pageCount(n, p):\n    #\n    # Write your code here.\n    #\n    return(min(p//2,(n-p)//2))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    p = int(input())\n\n    result = pageCount(n, p)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.96,"language":"python3"},{"contest":"Master","challenge":"Drawing Book ","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the pageCount function below.\n#\ndef pageCount(n, p):\n    #\n    # Write your code here.\n    #\n    return(min(p//2,(n-p+1)//2))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    p = int(input())\n\n    result = pageCount(n, p)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.84,"language":"python3"},{"contest":"Master","challenge":"Drawing Book ","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the pageCount function below.\n#\ndef pageCount(n, p):\n    #\n    # Write your code here.\n    #\n    return(min(p//2,(n-p)//2))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    p = int(input())\n\n    result = pageCount(n, p)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.96,"language":"python3"},{"contest":"Master","challenge":"Drawing Book ","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the pageCount function below.\n#\ndef pageCount(n, p):\n    #\n    # Write your code here.\n    if n%2==1:\n        return(min(p//2,(n-p)//2))\n    else: return(min(p//2,(n-p+1)//2))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    p = int(input())\n\n    result = pageCount(n, p)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Counting Valleys","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the countingValleys function below.\ndef countingValleys(n, s):\n    valleys=0\n    height=0\n    v_ready=1\n    for i in s:\n        if i=='U': height+=1\n        else: height-=1\n        if height==0: v_ready=1\n        if height==-1 and v_ready==1: \n            valleys+=1\n            v_ready=0\n    return valleys\n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    s = input()\n\n    result = countingValleys(n, s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Electronics Shop","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the getMoneySpent function below.\n#\ndef getMoneySpent(keyboards, drives, b):\n    #\n    # Write your code here.\n    #\n    spend=0\n    for i in range(n):\n        for j in range(m):\n            if keyboards[i]+drives[j]\u003c=b:\n                spend=max(spend,keyboards[i]+drives[j])\n    if not spend: return -1\n    else: return spend\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    bnm = input().split()\n\n    b = int(bnm[0])\n\n    n = int(bnm[1])\n\n    m = int(bnm[2])\n\n    keyboards = list(map(int, input().rstrip().split()))\n\n    drives = list(map(int, input().rstrip().split()))\n\n    #\n    # The maximum amount of money she can spend on a keyboard and USB drive, or -1 if she can't purchase both items\n    #\n\n    moneySpent = getMoneySpent(keyboards, drives, b)\n\n    fptr.write(str(moneySpent) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Cats and a Mouse","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the catAndMouse function below.\ndef catAndMouse(x, y, z):\n    if abs(z-x)==abs(z-y): return 'Mouse C'\n    elif abs(z-x)\u003cabs(z-y): return 'Cat A'\n    else: return 'Cat B'\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        xyz = input().split()\n\n        x = int(xyz[0])\n\n        y = int(xyz[1])\n\n        z = int(xyz[2])\n\n        result = catAndMouse(x, y, z)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Forming a Magic Square","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the formingMagicSquare function below.\ndef formingMagicSquare(s):\n    return abs(sum(s[0])+sum(s[1])+sum(s[2])-45)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = []\n\n    for _ in range(3):\n        s.append(list(map(int, input().rstrip().split())))\n\n    result = formingMagicSquare(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.095238095238,"language":"python3"},{"contest":"Master","challenge":"Forming a Magic Square","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the formingMagicSquare function below.\ndef formingMagicSquare(s):\n    return abs(s[0][0]+s[2][2]-10)+abs(s[0][1]+s[2][1]-10)+abs(s[0][2]+s[2][0]-10)+abs(s[1][0]+s[1][2]-10)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = []\n\n    for _ in range(3):\n        s.append(list(map(int, input().rstrip().split())))\n\n    result = formingMagicSquare(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.047619047619,"language":"python3"},{"contest":"Master","challenge":"Forming a Magic Square","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the formingMagicSquare function below.\ndef formingMagicSquare(s):\n    return abs(s[0][0]+s[2][2]-10)+abs(s[0][1]+s[2][1]-10)+abs(s[0][2]+s[2][0]-10)+abs(s[1][0]+s[1][2]-10)+abs(s[1][1]-5)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = []\n\n    for _ in range(3):\n        s.append(list(map(int, input().rstrip().split())))\n\n    result = formingMagicSquare(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.238095238095,"language":"python3"},{"contest":"Master","challenge":"Forming a Magic Square","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the formingMagicSquare function below.\ndef formingMagicSquare(s):\n    solution=[]\n    test=[i for j in s for i in j]\n    x=0\n    sols = [\n                [8, 1, 6, 3, 5, 7, 4, 9, 2],\n                [6, 1, 8, 7, 5, 3, 2, 9, 4],\n                [4, 9, 2, 3, 5, 7, 8, 1, 6],\n                [2, 9, 4, 7, 5, 3, 6, 1, 8],\n                [8, 3, 4, 1, 5, 9, 6, 7, 2],\n                [4, 3, 8, 9, 5, 1, 2, 7, 6],\n                [6, 7, 2, 1, 5, 9, 8, 3, 4],\n                [2, 7, 6, 9, 5, 1, 4, 3, 8]\n            ]\n \n\n    for i in sols:\n        for j in range(9):\n            x+=abs(i[j]-test[j])\n        solution.append(x)\n        x=0\n        \n    return (min(solution))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = []\n\n    for _ in range(3):\n        s.append(list(map(int, input().rstrip().split())))\n\n    result = formingMagicSquare(s)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Picking Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the pickingNumbers function below.\ndef pickingNumbers(a):\n    solution=[]\n    for i in a:\n        solution.append(a.count(i)+a.count(i+1))\n        solution.append(a.count(i)-a.count(i+1))\n    return max(solution)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = pickingNumbers(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the climbingLeaderboard function below.\ndef climbingLeaderboard(scores, alice):\n    scores_wodup=[]\n    rank=[]\n    for i in scores:\n        if i not in scores_wodup: scores_wodup.append(i)\n    for i in alice:\n        for j in scores_wodup:\n            if i \u003c min(scores_wodup):\n                rank.append(len(scores_wodup)+1)\n                break\n            if i \u003c j: pass\n            else: \n                rank.append(scores_wodup.index(j)+1)\n                break\n    return rank\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    scores_count = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    alice_count = int(input())\n\n    alice = list(map(int, input().rstrip().split()))\n\n    result = climbingLeaderboard(scores, alice)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.6,"language":"python3"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the climbingLeaderboard function below.\ndef climbingLeaderboard(scores, alice):\n    scores_wodup=[]\n    rank=[]\n    for i in scores:\n        if i not in scores_wodup: scores_wodup.append(i)\n    for i in alice:\n        for j in scores_wodup:\n            if i \u003c min(scores_wodup):\n                rank.append(len(scores_wodup)+1)\n                break\n            if i \u003c j: pass\n            else: \n                rank.append(scores_wodup.index(j)+1)\n                break\n    return rank\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    scores_count = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    alice_count = int(input())\n\n    alice = list(map(int, input().rstrip().split()))\n\n    result = climbingLeaderboard(scores, alice)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.6,"language":"python3"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the climbingLeaderboard function below.\ndef climbingLeaderboard(scores, alice):\n    scores_wodup=[]\n    rank=[]\n    for i in scores:\n        if i not in scores_wodup: scores_wodup.append(i)\n    for i in alice:\n        a=scores_wodup\n        a.append(i)\n        a=sorted(a,reverse=True)\n        rank.append(a.index(i)+1)\n    return rank\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    scores_count = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    alice_count = int(input())\n\n    alice = list(map(int, input().rstrip().split()))\n\n    result = climbingLeaderboard(scores, alice)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.6,"language":"python3"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the climbingLeaderboard function below.\ndef climbingLeaderboard(scores, alice):\n    scores_wodup=sorted(set(scores),reverse=True)\n    rank=[]\n    l=len(scores_wodup)\n    for i in alice:\n        while l\u003e0 and i\u003e=scores_wodup[l-1]:\n            l-=1\n        rank.append(l+1)\n    return rank\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    scores_count = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    alice_count = int(input())\n\n    alice = list(map(int, input().rstrip().split()))\n\n    result = climbingLeaderboard(scores, alice)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Climbing the Leaderboard","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the climbingLeaderboard function below.\ndef climbingLeaderboard(scores, alice):\n    scores_wodup=sorted(set(scores),reverse=True)\n    rank=[]\n    l=len(scores_wodup)\n    for i in alice:\n        while l\u003e0 and i\u003e=scores_wodup[l-1]:\n            l-=1\n        rank.append(l+1)\n    return rank\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    scores_count = int(input())\n\n    scores = list(map(int, input().rstrip().split()))\n\n    alice_count = int(input())\n\n    alice = list(map(int, input().rstrip().split()))\n\n    result = climbingLeaderboard(scores, alice)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Hurdle Race","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hurdleRace function below.\ndef hurdleRace(k, height):\n    if max(height)-k\u003c=0: return 0\n    else: return max(height)-k\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    height = list(map(int, input().rstrip().split()))\n\n    result = hurdleRace(k, height)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Designer PDF Viewer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the designerPdfViewer function below.\ndef designerPdfViewer(h, word):\n    alphabet='abcdefghijklmnopqrstuwvxyz'\n    heights=[]\n    for i in word:\n        heights.append(h[alphabet.index(i)])\n    return max(heights)*len(word)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    h = list(map(int, input().rstrip().split()))\n\n    word = input()\n\n    result = designerPdfViewer(h, word)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Designer PDF Viewer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the designerPdfViewer function below.\ndef designerPdfViewer(h, word):\n    alphabet='abcdefghijklmnopqrstuvwxyz'\n    heights=[]\n    for i in word:\n        heights.append(h[alphabet.index(i)])\n    return max(heights)*len(word)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    h = list(map(int, input().rstrip().split()))\n\n    word = input()\n\n    result = designerPdfViewer(h, word)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Utopian Tree","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the utopianTree function below.\ndef utopianTree(n):\n    h=1\n    if not n: return h\n    for i in range(1,n+1):\n        if i%2: h*=2\n        else: h+=1\n    return h\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        result = utopianTree(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Angry Professor","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the angryProfessor function below.\ndef angryProfessor(k, a):\n    calm=0\n    for i in a:\n        if i\u003c=0:calm+=1\n    if calm\u003e=k: return 'NO'\n    else: return 'YES'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nk = input().split()\n\n        n = int(nk[0])\n\n        k = int(nk[1])\n\n        a = list(map(int, input().rstrip().split()))\n\n        result = angryProfessor(k, a)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Beautiful Days at the Movies","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the beautifulDays function below.\ndef reversenum(i):\n    return int(str(i)[::-1])\ndef beautifulDays(i, j, k):\n    result=0\n    for x in range(i,j+1):\n        if not abs(x-reversenum(x))%k:\n            result+=1\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    ijk = input().split()\n\n    i = int(ijk[0])\n\n    j = int(ijk[1])\n\n    k = int(ijk[2])\n\n    result = beautifulDays(i, j, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Viral Advertising","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the viralAdvertising function below.\ndef like_gen(day):\n    n=1\n    num=5\n    yield num\n    while n\u003c=day:\n        yield (num//2)*3\n        n+=1\n        num=(num//2)*3\ndef viralAdvertising(n):\n    sum=0\n    x=like_gen(n)\n    for i in range(n):\n        sum+=(next(x)//2)\n    return sum\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    result = viralAdvertising(n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    return n%m+s\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    return m%n+s\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.146341463415,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    if not m: return s\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.146341463415,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    if not m: return s\n    return (s+m-1)%n - 1\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    if (s+m-1)==n: return s\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.146341463415,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    print((s+m-1)%n)\n    if (s+m-1)==n: return s\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.146341463415,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    print((s+m-1)%n)\n    if (s+m-1)==n and s!=1: return s-1\n    if (s+m-1)==n and s==1: return n\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.146341463415,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    print((s+m-1)%n)\n    if not (s+m-1)%n and s!=1: return s-1\n    if not (s+m-1)%n and s==1: return n\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.146341463415,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    if (s+m-1)%n==0 and s!=(s+m-1)//n: return s-((s+m-1)//n)\n    if (s+m-1)%n==0 and s==(s+m-1)//n: return n\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.268292682927,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    if (s+m-1)%n==0: return n\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Save the Prisoner!","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the saveThePrisoner function below.\ndef saveThePrisoner(n, m, s):\n    if (s+m-1)%n==0: return n\n    return (s+m-1)%n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nms = input().split()\n\n        n = int(nms[0])\n\n        m = int(nms[1])\n\n        s = int(nms[2])\n\n        result = saveThePrisoner(n, m, s)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Circular Array Rotation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\nimport collections\n\n# Complete the circularArrayRotation function below.\ndef circularArrayRotation(a, k, queries):\n    result=[]\n    x=collections.deque(a)\n    x.rotate(k)\n    for i in queries:\n        result.append(x[i])\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nkq = input().split()\n\n    n = int(nkq[0])\n\n    k = int(nkq[1])\n\n    q = int(nkq[2])\n\n    a = list(map(int, input().rstrip().split()))\n\n    queries = []\n\n    for _ in range(q):\n        queries_item = int(input())\n        queries.append(queries_item)\n\n    result = circularArrayRotation(a, k, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sequence Equation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the permutationEquation function below.\ndef permutationEquation(p):\n    result=[]\n    for i in range(len(p)):\n        result.append(p.index(p.index(i+1)+1)+1)\n    return result\n        \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    p = list(map(int, input().rstrip().split()))\n\n    result = permutationEquation(p)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Say \"Hello, World!\" With Python","code":"print(\"Hello, World!\")","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python If-Else","code":"#!/bin/python3\n\nn = int(input())\nif n%2: print('Weird')\nelif 2\u003c=n\u003c=5: print('Not Weird')\nelif 6\u003c=n\u003c=20: print('Weird')\nelse: print('Not Weird')\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arithmetic Operators","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a+b)\n    print(a-b)\n    print(a*b)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Python: Division","code":"if __name__ == '__main__':\n    a = int(input())\n    b = int(input())\n    print(a//b);print(a/b)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Loops","code":"if __name__ == '__main__':\n    n = int(input())\n    for i in range(n):\n        print(i**2)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Write a function","code":"def is_leap(year):\n    if not year%400: return True\n    elif not year%100: return False\n    elif not year%4: return True\n    else: return False","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Print Function","code":"if __name__ == '__main__':\n    n = int(input())\n    for i in range(1,n+1):\n        print(i,sep='')","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Print Function","code":"if __name__ == '__main__':\n    n = int(input())\n    for i in range(1,n+1):\n        print(i,sep=' ',end='')","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Arrays - DS","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the reverseArray function below.\ndef reverseArray(a):\n    result=[]\n    for i in range(len(a)-1,-1,-1):\n        result.append(a[i])\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr_count = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    res = reverseArray(arr)\n\n    fptr.write(' '.join(map(str, res)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find the Point","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the findPoint function below.\n#\ndef findPoint(px, py, qx, qy):\n    r=[]\n    r.append(2*qx-px)\n    r.append(2*qy-py)\n    return r\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    for n_itr in range(n):\n        pxPyQxQy = input().split()\n\n        px = int(pxPyQxQy[0])\n\n        py = int(pxPyQxQy[1])\n\n        qx = int(pxPyQxQy[2])\n\n        qy = int(pxPyQxQy[3])\n\n        result = findPoint(px, py, qx, qy)\n\n        fptr.write(' '.join(map(str, result)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Maximum Draws","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the maximumDraws function below.\n#\ndef maximumDraws(n):\n    #\n    # Write your code here.\n    #\n    return n+1\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        result = maximumDraws(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Handshake","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the handshake function below.\n#\ndef handshake(n):\n    #\n    # Write your code here.\n    #\n    return n*(n-1)//2\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        result = handshake(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Minimum Height Triangle","code":"#!/bin/python3\n\nimport sys\n\ndef lowestTriangle(base, area):\n    return round(2*area/base)\n\nbase, area = input().strip().split(' ')\nbase, area = [int(base), int(area)]\nheight = lowestTriangle(base, area)\nprint(height)","score":0.625,"language":"python3"},{"contest":"Master","challenge":"Minimum Height Triangle","code":"#!/bin/python3\n\nimport sys\n\ndef lowestTriangle(base, area):\n    return round(2*area/base)\n\nbase, area = input().strip().split(' ')\nbase, area = [int(base), int(area)]\nheight = lowestTriangle(base, area)\nprint(height)","score":0.625,"language":"python3"},{"contest":"Master","challenge":"Minimum Height Triangle","code":"#!/bin/python3\n\nimport sys\n\ndef lowestTriangle(base, area):\n    if round(2*area/base)==0: return 1\n    return round(2*area/base)\n\nbase, area = input().strip().split(' ')\nbase, area = [int(base), int(area)]\nheight = lowestTriangle(base, area)\nprint(height)","score":0.6875,"language":"python3"},{"contest":"Master","challenge":"Minimum Height Triangle","code":"#!/bin/python3\n\nimport sys\n\ndef lowestTriangle(base, area):\n    return floor(2*area/base)+1\n\nbase, area = input().strip().split(' ')\nbase, area = [int(base), int(area)]\nheight = lowestTriangle(base, area)\nprint(height)","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Minimum Height Triangle","code":"#!/bin/python3\n\nimport sys\nimport math\ndef lowestTriangle(base, area):\n    return int(math.floor(2*area/base-0.001)+1)\n\nbase, area = input().strip().split(' ')\nbase, area = [int(base), int(area)]\nheight = lowestTriangle(base, area)\nprint(height)","score":0.9375,"language":"python3"},{"contest":"Master","challenge":"Minimum Height Triangle","code":"#!/bin/python3\n\nimport sys\nimport math\ndef lowestTriangle(base, area):\n    if round(2*area/base)==-: return 1\n    return int(math.floor(2*area/base-0.001)+1)\n\nbase, area = input().strip().split(' ')\nbase, area = [int(base), int(area)]\nheight = lowestTriangle(base, area)\nprint(height)","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Minimum Height Triangle","code":"#!/bin/python3\n\nimport sys\nimport math\ndef lowestTriangle(base, area):\n    if round(2*area/base)==0: return 1\n    return int(math.floor(2*area/base-0.001)+1)\n\nbase, area = input().strip().split(' ')\nbase, area = [int(base), int(area)]\nheight = lowestTriangle(base, area)\nprint(height)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Army Game","code":"#!/bin/python3\n\nimport os\nimport sys\n\n#\n# Complete the gameWithCells function below.\n#\ndef gameWithCells(n, m):\n    return (n-1)*(m-1)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    result = gameWithCells(n, m)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"List Comprehensions","code":"if __name__ == '__main__':\n    x = int(raw_input())\n    y = int(raw_input())\n    z = int(raw_input())\n    n = int(raw_input())\n    print( [[i,j,k] for i in range(x+1) for j in range(y+1) for k in range(z+1) if i+j+k!=n])","score":1.0,"language":"python"},{"contest":"Master","challenge":"Find the Runner-Up Score!  ","code":"if __name__ == '__main__':\n    n = int(raw_input())\n    arr = map(int, raw_input().split())\n    arr2=[]\n    for i in arr:\n        if i not in arr2: arr2.append(i)\n    arr2.remove(max(arr))\n    print(max(arr2))","score":1.0,"language":"python"},{"contest":"Master","challenge":"Nested Lists","code":"if __name__ == '__main__':\n    min,secmin=10000.0,10000.0\n    a=[]\n    for _ in range(int(input())):\n        name = input()\n        score = float(input())\n\n        result=[]\n        a.append([name,score])\n        if score \u003c min:\n            secmin=min\n            min=score\n\n        elif min \u003c score \u003c=secmin:\n            secmin=score\n    for i in range(len(a)):\n        if a[i][1]==secmin:\n            result.append(a[i][0])\n    print ('\\n'.join(sorted(result)))","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Finding the percentage","code":"if __name__ == '__main__':\n    n = int(input())\n    x=0.0\n    student_marks = {}\n    for _ in range(n):\n        name, *line = input().split()\n        scores = list(map(float, line))\n        student_marks[name] = scores\n    query_name = input()\n    x=sum(student_marks[query_name])/len(student_marks[query_name])\n    print(\"%.2f\" % x)","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Specific String","code":"Regex_Pattern = r'hackerrank'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Anything But a Newline","code":"regex_pattern = r\".{3}\\..{3}\\..{3}\\..{3}\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Anything But a Newline","code":"regex_pattern = r\"...\\....\\....\\....\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Anything But a Newline","code":"regex_pattern = r\"^...\\....\\....\\....\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Anything But a Newline","code":"regex_pattern = r\"(...\\....\\....\\....)\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Anything But a Newline","code":"regex_pattern = r\"^...\\....\\....\\....$\"\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Digits \u0026 Non-Digit Characters","code":"Regex_Pattern = r\"\\d\\d\\D\\d\\d\\D\\d\\d\\d\\d\"\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Whitespace \u0026 Non-Whitespace Character","code":"Regex_Pattern = r\"\\S\\S\\s\\S\\S\\s\\S\\S\"\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Word \u0026 Non-Word Character","code":"Regex_Pattern = r\"\\w{3}\\W\\w{10}\\W\\w{3}\"\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Start \u0026 End","code":"Regex_Pattern = r\"^\\d\\w{4}\\.\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Start \u0026 End","code":"Regex_Pattern = r\"^\\d\\D{4}\\.\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Start \u0026 End","code":"Regex_Pattern = r\"^\\d\\w\\.\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Start \u0026 End","code":"Regex_Pattern = r\"^\\d\\D{4}\\.\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Start \u0026 End","code":"Regex_Pattern = r\"^\\d\\w{4}\\.\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Start \u0026 End","code":"Regex_Pattern = r\"^\\d\\w{4}\\.$\"\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Specific Characters","code":"Regex_Pattern = r'^[123][120][xs0][30Aa][xsu][\\.\\,]$'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Excluding Specific Characters","code":"Regex_Pattern = r'\\D[^aeiou][^bcDF]\\S[^AEIOU][^\\.\\,]'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Excluding Specific Characters","code":"Regex_Pattern = r'^\\D[^aeiou][^bcDF]\\S[^AEIOU][^\\.\\,]$'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Character Ranges","code":"Regex_Pattern = r'^[a-z][1-9][^a-z][^A-Z][A-Z]'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching {x} Repetitions","code":"Regex_Pattern = r'^[a-zA-Z02468]{40}[13579]{5}$'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching {x} Repetitions","code":"Regex_Pattern = r'^[a-zA-Z02468]{40}[13579\\r]{5}$'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching {x} Repetitions","code":"Regex_Pattern = r'^[a-zA-Z02468]{40}[13579\\s]{5}$'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching {x, y} Repetitions","code":"Regex_Pattern = r'^\\d{1,2}[a-zA-Z]{3,}\\.{,3}$'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Zero Or More Repetitions","code":"Regex_Pattern = r'^\\d{2,}[a-z]*[A-Z]*$'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching One Or More Repetitions","code":"Regex_Pattern = r'^\\d+[A-Z]+[a-z]+$'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Ending Items","code":"Regex_Pattern = r'[a-zA-z]s$'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Ending Items","code":"Regex_Pattern = r'[a-zA-z]*s$'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Ending Items","code":"Regex_Pattern = r'[a-zA-z]*s$|s$'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Ending Items","code":"Regex_Pattern = r'^[a-zA-z]*s$'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"if __name__ == '__main__':\n\n\n    t = int(input())\n\n    for t_itr in range(t):\n        S = map(str, input())\n    t1=int(input())\n    for t_itr in range(t1):\n        sword = list(map(str,input().rstrip().split()))\n    print(S[0])","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"import re\nif __name__ == '__main__':\n\n    S=[]\n    t = int(input())\n\n    for t_itr in range(t):\n        S.append(input())\n    t1=int(input())\n    for t_itr in range(t1):\n        sword = list(map(str,input().rstrip().split()))\n    for i in range(t):\n        for j in range(t1):\n            print(len(re.findall(r'\\W?'+sword[j]+r'\\W',S[i])))","score":0.1,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"import re\nif __name__ == '__main__':\n\n    S=[]\n    t = int(input())\n\n    for t_itr in range(t):\n        S.append(input())\n    t1=int(input())\n    for t_itr in range(t1):\n        sword = list(map(str,input().rstrip().split()))\n    for i in range(t1):\n        for j in range(t):\n            print(len(re.findall(r'\\W?'+sword[i]+r'\\W',S[j])))","score":0.1,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"import re\nif __name__ == '__main__':\n\n    S=[]\n    t = int(input())\n    print(t)\n    for t_itr in range(t):\n        S.append(input())\n    t1=int(input())\n    for t_itr in range(t1):\n        sword = list(map(str,input().rstrip().split()))\n    for i in range(t1):\n        for j in range(t):\n            print(len(re.findall(r'\\W?'+sword[i]+r'\\W',S[j])))","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"import re\nif __name__ == '__main__':\n\n    S=[]\n    t = int(input())\n    for t_itr in range(t):\n        S.append(input())\n        print(S[t_itr])\n    t1=int(input())\n    for t_itr in range(t1):\n        sword = list(map(str,input().rstrip().split()))\n    for i in range(t1):\n        for j in range(t):\n            print(len(re.findall(r'\\W?'+sword[i]+r'\\W',S[j])))","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"import re\nif __name__ == '__main__':\n    sum=0\n    S=[]\n    t = int(input())\n    for t_itr in range(t):\n        S.append(input())\n        print(S[t_itr])\n    t1=int(input())\n    for t_itr in range(t1):\n        sword = list(map(str,input().rstrip().split()))\n    for i in range(t1):\n        for j in range(t):\n            sum+=(len(re.findall(r'\\W?'+sword[i]+r'\\W',S[j])))\n        print(sum);sum=0","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"import re\nif __name__ == '__main__':\n    sum=0\n    S=[]\n    sword=[]\n    t = int(input())\n    for t_itr in range(t):\n        S.append(input())\n    t1=int(input())\n    for t_itr in range(t1):\n        sword.append(input())\n    for i in range(t1):\n        for j in range(t):\n            sum+=(len(re.findall(r'\\W?'+sword[i]+r'\\W',S[j])))\n        print(sum);sum=0","score":0.1,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"import re\nif __name__ == '__main__':\n    sum=0\n    S=[]\n    sword=[]\n    t = int(input())\n    for t_itr in range(t):\n        S.append(input())\n    t1=int(input())\n    for t_itr in range(t1):\n        sword.append(input())\n    for i in range(t1):\n        for j in range(t):\n            sum+=(len(re.findall(r'^\\W?'+sword[i]+r'\\W',S[j])))\n        print(sum);sum=0","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Find a Word","code":"import re\nif __name__ == '__main__':\n    sum=0\n    S=[]\n    sword=[]\n    t = int(input())\n    for t_itr in range(t):\n        S.append(input())\n    t1=int(input())\n    for t_itr in range(t1):\n        sword.append(input())\n    for i in range(t1):\n        for j in range(t):\n            sum+=(len(re.findall(r'\\b'+sword[i]+r'\\b',S[j])))\n        print(sum);sum=0","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Word Boundaries","code":"Regex_Pattern = r'\\b[aeiouAEIOU][a-zA-Z]+\\b'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Word Boundaries","code":"Regex_Pattern = r'\\b[aeiouAEIOU][a-zA-Z]+?\\b'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Word Boundaries","code":"Regex_Pattern = r'\\b[aeiouAEIOU][a-zA-Z]*\\b'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Capturing \u0026 Non-Capturing Groups","code":"Regex_Pattern = r'(ok){3,}'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Alternative Matching","code":"Regex_Pattern = r'^(Mr\\.|Mrs\\.|Ms\\.|Dr\\.|Er\\.)[a-zA-Z]+'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Alternative Matching","code":"Regex_Pattern = r'^(Mr\\.|Mrs\\.|Ms\\.|Dr\\.|Er\\.)[a-zA-Z]+$'\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Matching Same Text Again \u0026 Again","code":"Regex_Pattern = r'^(a-z)(\\w)(\\s)(\\W)(\\d)(\\D)(A-Z)(a-zA-Z)(aeiouAEIOU)(\\S)\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10$'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Same Text Again \u0026 Again","code":"Regex_Pattern = r'(a-z)(\\w)(\\s)(\\W)(\\d)(\\D)(A-Z)(a-zA-Z)(aeiouAEIOU)(\\S)\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10'\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Matching Same Text Again \u0026 Again","code":"Regex_Pattern = r'([a-z])(\\w)(\\s)(\\W)(\\d)(\\D)([A-Z])([a-zA-Z])([aeiouAEIOU])(\\S)\\1\\2\\3\\4\\5\\6\\7\\8\\9\\10'","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Backreferences To Failed Groups","code":"Regex_Pattern = r\"\\d\\d(\\-?){4}\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Backreferences To Failed Groups","code":"Regex_Pattern = r\"(\\d\\d(\\-?)){4}\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Backreferences To Failed Groups","code":"Regex_Pattern = r\"^(\\d\\d(\\-?)){4}$\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Backreferences To Failed Groups","code":"Regex_Pattern = r\"^(\\d\\d\\-|\\d\\d){4}$\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Backreferences To Failed Groups","code":"Regex_Pattern = r\"^(\\d){8}$|^(\\d\\d\\-?){4}$\"\t# Do not delete 'r'.","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Backreferences To Failed Groups","code":"Regex_Pattern = r\"^(\\d){8}$|^(\\d\\d\\-){3}(\\d)$\"\t# Do not delete 'r'.","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Branch Reset Groups","code":"$Regex_Pattern = '/^([0-9][0-9]\\-|[0-9][0-9]\\-\\-\\-|[0-9][0-9]\\.|[0-9][0-9]\\:){3}([0-9][0-9])$/'; //Do not delete '/'. Replace __________ with your regex","score":0.0,"language":"php"},{"contest":"Master","challenge":"Branch Reset Groups","code":"$Regex_Pattern = '/^([0-9][0-9]\\-|\\-\\-\\-|\\.\\:){3}([0-9][0-9])$/'; //Do not delete '/'. Replace __________ with your regex","score":0.0,"language":"php"},{"contest":"Master","challenge":"Branch Reset Groups","code":"$Regex_Pattern = '/([0-9][0-9]\\-|\\-\\-\\-|\\.\\:){3}([0-9][0-9])/'; //Do not delete '/'. Replace __________ with your regex","score":0.0,"language":"php"},{"contest":"Master","challenge":"Branch Reset Groups","code":"$Regex_Pattern = '/(([0-9][0-9])(?|(\\.)|(\\:)|(\\-)|(\\-\\-\\-))){3}([0-9][0-9])/'; //Do not delete '/'. Replace __________ with your regex","score":0.0,"language":"php"},{"contest":"Master","challenge":"Branch Reset Groups","code":"$Regex_Pattern = '/^(([0-9][0-9])(?|(\\.)|(\\:)|(\\-)|(\\-\\-\\-))){3}([0-9][0-9])$/'; //Do not delete '/'. Replace __________ with your regex","score":0.0,"language":"php"},{"contest":"Master","challenge":"Branch Reset Groups","code":"$Regex_Pattern = '/(?|(([0-9][0-9]\\.){3}([0-9][0-9]))|(([0-9][0-9]\\:){3}([0-9][0-9]))|(([0-9][0-9]\\-){3}([0-9][0-9]))|(([0-9][0-9]\\-\\-\\-){3}([0-9][0-9])))/'; //Do not delete '/'. Replace __________ with your regex","score":0.0,"language":"php"},{"contest":"Master","challenge":"Branch Reset Groups","code":"$Regex_Pattern = '/^(?|(([0-9][0-9]\\.){3}([0-9][0-9]))|(([0-9][0-9]\\:){3}([0-9][0-9]))|(([0-9][0-9]\\-){3}([0-9][0-9]))|(([0-9][0-9]\\-\\-\\-){3}([0-9][0-9])))$/'; //Do not delete '/'. Replace __________ with your regex","score":1.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/\\2\\2(tic)|(tac)/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^\\2\\2(tic)|(tac)/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^\\2\\2(tic)|(tac)|(tactic)/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^\\2\\2(tic)|(tac)+|(tactic)/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^\\2\\2(tic)|(tac)+|(^tictic)$/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^\\2\\2(tic)(tac)+|(^tictic)$/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^\\2\\2(tic)(tac)*|(^tictic)$/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^\\2\\2(tic)(tac){0,}|(^tictic)$/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^\\2\\2(tic)(tac)|(tactac)|(tactic)/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)|(tac?)+|(tictac?)+|(tactictac?)+/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)(tac?)+|(tictac?)+|(tactictac?)+/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)(tac)?+|(tictac)?+|(tactictac)?+/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)\\2+\\1(tac)|(tic)/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)\\2+\\3(tac)|(tic)/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)((tac)+(tic))*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)((tac)+((tic)|(tac))*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)((tac)+((tic)|(tac)))*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)((tac)+(?(tic)|(tac)))*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)(tac)*(tactic)*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)((tac)*|(tactic)*)/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)((tac)*|(tactic)*)*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)((tac)|(tactic))*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tactactic)((tac)|(^tictic))*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^tac(\\2tic|(tac))+/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/(tac(tac(tic)))*/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^(tac(tac(tic)))*$/'; //Do not delete '/'. Replace __________ with your regex.","score":0.0,"language":"php"},{"contest":"Master","challenge":"Forward References","code":"$Regex_Pattern = '/^tac(tac(tic)?)*$/'; //Do not delete '/'. Replace __________ with your regex.","score":1.0,"language":"php"},{"contest":"Master","challenge":"Jumping on the Clouds: Revisited","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the jumpingOnClouds function below.\ndef jumpingOnClouds(c, k):\n    i=0\n    red=100\n    red=red-1-2*c[0]\n    while (i+k)%n !=0:\n        red=red-1-c[(i+k)%n]*2\n        i+=k\n    return red\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = jumpingOnClouds(c, k)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Find Digits","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the findDigits function below.\ndef findDigits(n):\n    result=0\n    num=str(n)\n    for i in num:\n        if int(i)!=0:\n            if not n%int(i):result+=1\n    return result\n                \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        result = findDigits(n)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Extra Long Factorials","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the extraLongFactorials function below.\ndef extraLongFactorials(n):\n    print(math.factorial(n))\nif __name__ == '__main__':\n    n = int(input())\n\n    extraLongFactorials(n)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Append and Delete","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the appendAndDelete function below.\ndef appendAndDelete(s, t, k):\n    #Check the common part of strings\n    common_length=0\n    for i in range(min(len(s),len(t))):\n        if t[i]==s[i]:\n            common_length+=1\n        else: break\n    #count moves to achieve common part (abs(len string1 - string2)) = k1\n    k1=max(len(s),len(t))-common_length\n    #if common part lenght*2 =k-k1 then yes\n    if common_length*2\u003c=k-k1: return 'Yes'\n    #else if k-k1 is even then yes\n    elif (k-k1)%2==0: return 'Yes'\n    #else no\n    else: return 'No'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    t = input()\n\n    k = int(input())\n\n    result = appendAndDelete(s, t, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.818181818182,"language":"python3"},{"contest":"Master","challenge":"Append and Delete","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the appendAndDelete function below.\ndef appendAndDelete(s, t, k):\n    #Check the common part of strings\n    common_length=0\n    for i in range(min(len(s),len(t))):\n        if t[i]==s[i]:\n            common_length+=1\n        else: break\n    #count moves to achieve common part (abs(len string1 - string2)) = k1\n    k1=max(len(s),len(t))-common_length\n    #if common part lenght*2 =k-k1 then yes\n    if common_length*2\u003c=k-k1: return 'Yes'\n    #else if k-k1 is even then yes\n    elif (k-k1)%2==0 and k-k1+common_length\u003e=min(len(s),len(t)):return 'Yes'\n    #else no\n    else: return 'No'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    t = input()\n\n    k = int(input())\n\n    result = appendAndDelete(s, t, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.909090909091,"language":"python3"},{"contest":"Master","challenge":"Append and Delete","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the appendAndDelete function below.\ndef appendAndDelete(s, t, k):\n    #Check the common part of strings\n    common_length=0\n    for i in range(min(len(s),len(t))):\n        if t[i]==s[i]:\n            common_length+=1\n        else: break\n    #count moves to achieve common part (abs(len string1 - string2)) = k1\n    k1=max(len(s),len(t))-common_length\n    #if common part lenght*2 =k-k1 then yes\n    if common_length*2\u003c=k-k1 and common_length!=0: return 'Yes'\n    #else if k-k1 is even then yes\n    elif (k-k1)%2==0 and k-k1+common_length\u003e=min(len(s),len(t)):return 'Yes'\n    #else no\n    else: return 'No'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    t = input()\n\n    k = int(input())\n\n    result = appendAndDelete(s, t, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.909090909091,"language":"python3"},{"contest":"Master","challenge":"Append and Delete","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the appendAndDelete function below.\ndef appendAndDelete(s, t, k):\n    #Check the common part of strings\n    common_length=0\n    for i in range(min(len(s),len(t))):\n        if t[i]==s[i]:\n            common_length+=1\n        else: break\n    #count moves to achieve common part (abs(len string1 - string2)) = k1\n    k1=max(len(s),len(t))-common_length\n    #if common part lenght*2 =k-k1 then yes\n    if common_length*2\u003c=k-k1 and k-k1+common_length\u003e=min(len(s),len(t)): return 'Yes'\n    #else if k-k1 is even then yes\n    elif (k-k1)%2==0 and k-k1+common_length\u003e=min(len(s),len(t)):return 'Yes'\n    #else no\n    else: return 'No'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    t = input()\n\n    k = int(input())\n\n    result = appendAndDelete(s, t, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Append and Delete","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the appendAndDelete function below.\ndef appendAndDelete(s, t, k):\n    #Check the common part of strings\n    common_length=0\n    for i in range(min(len(s),len(t))):\n        if t[i]==s[i]:\n            common_length+=1\n        else: break\n    #count moves to achieve common part (abs(len string1 - string2)) = k1\n    k1=max(len(s),len(t))-common_length\n    #if common part lenght*2 =k-k1 then yes\n    if common_length*2\u003c=k-k1 and k-k1+common_length\u003e=min(len(s),len(t)): return 'Yes'\n    #else if k-k1 is even then yes\n    elif (k-k1)%2==0 and k-k1+common_length\u003e=min(len(s),len(t)):return 'Yes'\n    #else no\n    else: return 'No'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    t = input()\n\n    k = int(input())\n\n    result = appendAndDelete(s, t, k)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Sherlock and Squares","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the squares function below.\ndef squares(a, b):\n    result=0\n    if a**0.5==math.floor(a**0.5):\n        result+=1\n    if b**0.5==math.floor(b**0.5):\n        result+=1\n    result+=math.floor(b**0.5)-math.floor(a**0.5)-1\n    if result \u003c 0:\n        return 0\n    return result\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        ab = input().split()\n\n        a = int(ab[0])\n\n        b = int(ab[1])\n\n        result = squares(a, b)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.125,"language":"python3"},{"contest":"Master","challenge":"Sherlock and Squares","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the squares function below.\ndef squares(a, b):\n    result=math.floor(b**0.5)-math.ceil(a**0.5)+1\n    return result\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        ab = input().split()\n\n        a = int(ab[0])\n\n        b = int(ab[1])\n\n        result = squares(a, b)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Library Fine","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the libraryFine function below.\ndef libraryFine(d1, m1, y1, d2, m2, y2):\n    if y1 != y2: return 10000\n    if m1\u003em2: return (m1-m2)*500\n    if m1==m2 and d1\u003ed2: return (d1-d2)*15\n    else: return 0\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    d1M1Y1 = input().split()\n\n    d1 = int(d1M1Y1[0])\n\n    m1 = int(d1M1Y1[1])\n\n    y1 = int(d1M1Y1[2])\n\n    d2M2Y2 = input().split()\n\n    d2 = int(d2M2Y2[0])\n\n    m2 = int(d2M2Y2[1])\n\n    y2 = int(d2M2Y2[2])\n\n    result = libraryFine(d1, m1, y1, d2, m2, y2)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.8125,"language":"python3"},{"contest":"Master","challenge":"Library Fine","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the libraryFine function below.\ndef libraryFine(d1, m1, y1, d2, m2, y2):\n    if y1 \u003e y2: return 10000\n    if m1\u003em2: return (m1-m2)*500\n    if m1==m2 and d1\u003ed2: return (d1-d2)*15\n    else: return 0\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    d1M1Y1 = input().split()\n\n    d1 = int(d1M1Y1[0])\n\n    m1 = int(d1M1Y1[1])\n\n    y1 = int(d1M1Y1[2])\n\n    d2M2Y2 = input().split()\n\n    d2 = int(d2M2Y2[0])\n\n    m2 = int(d2M2Y2[1])\n\n    y2 = int(d2M2Y2[2])\n\n    result = libraryFine(d1, m1, y1, d2, m2, y2)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.875,"language":"python3"},{"contest":"Master","challenge":"Library Fine","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the libraryFine function below.\ndef libraryFine(d1, m1, y1, d2, m2, y2):\n    if y1 \u003e y2: return 10000\n    if y1 \u003c y2: return 0\n    if m1\u003em2: return (m1-m2)*500\n    if m1==m2 and d1\u003ed2: return (d1-d2)*15\n    else: return 0\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    d1M1Y1 = input().split()\n\n    d1 = int(d1M1Y1[0])\n\n    m1 = int(d1M1Y1[1])\n\n    y1 = int(d1M1Y1[2])\n\n    d2M2Y2 = input().split()\n\n    d2 = int(d2M2Y2[0])\n\n    m2 = int(d2M2Y2[1])\n\n    y2 = int(d2M2Y2[2])\n\n    result = libraryFine(d1, m1, y1, d2, m2, y2)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Cut the sticks","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the cutTheSticks function below.\n\ndef cutTheSticks(arr):\n    result=[]\n    while len(arr)\u003e=1:\n        result.append(len(arr))\n        arr=list(map(lambda x: x-min(arr),arr))\n        while arr.count(0): arr.remove(0)\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = cutTheSticks(arr)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the nonDivisibleSubset function below.\ndef nonDivisibleSubset(k, S):\n    result=0\n    for i in range(n):\n        for j in range(i+1,n):\n            if (S[i]+S[j])%k==0: result+=1\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    S = list(map(int, input().rstrip().split()))\n\n    result = nonDivisibleSubset(k, S)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the nonDivisibleSubset function below.\ndef nonDivisibleSubset(k, S):\n    result=0\n    arr=[0]*k\n    for nums in S:\n        arr[nums%k]+=1\n    result+=arr[0]*(arr[0]-1)//2\n    for i in range(1,k):\n        if i\u003c=(k-i):\n            result+=arr[i]*arr[k-i]\n\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    S = list(map(int, input().rstrip().split()))\n\n    result = nonDivisibleSubset(k, S)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the nonDivisibleSubset function below.\ndef nonDivisibleSubset(k, S):\n    result=0\n    arr=[0]*k\n    for nums in S:\n        arr[nums%k]+=1\n    result+=arr[0]*(arr[0]-1)//2\n    for i in range(1,k):\n        if i\u003c(k-i):\n            result+=arr[i]*arr[k-i]\n        if i==k-i:\n            result+=arr[i]*(arr[i]-1)//2\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    S = list(map(int, input().rstrip().split()))\n\n    result = nonDivisibleSubset(k, S)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the nonDivisibleSubset function below.\ndef nonDivisibleSubset(k, S):\n    result=0\n    arr=[0]*k\n    for nums in S:\n        arr[nums%k]+=1\n    result+=arr[0]*(arr[0]-1)//2\n    for i in range(1,k):\n        if i\u003c(k-i):\n            result+=arr[i]*arr[k-i]\n        if i==k-i:\n            result+=arr[i]*(arr[i]-1)//2\n            \n    print(result)\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    S = list(map(int, input().rstrip().split()))\n\n    result = nonDivisibleSubset(k, S)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Non-Divisible Subset","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the nonDivisibleSubset function below.\ndef nonDivisibleSubset(k, S):\n    result=0\n    arr=[0]*k\n    for nums in S:\n        arr[nums%k]+=1\n    result=min(arr[0],1)\n    for i in range(1,k//2+1):\n        if i\u003c(k-i):\n            result+=max(arr[i],arr[k-i])\n        if i==k-i and arr[i]\u003e0:\n            result+=1\n            \n\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    S = list(map(int, input().rstrip().split()))\n\n    result = nonDivisibleSubset(k, S)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    return s.count('a')*(n//len(s))+s[:n%len(s)].count('a')\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Repeated String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the repeatedString function below.\ndef repeatedString(s, n):\n    return s.count('a')*(n//len(s))+s[:n%len(s)].count('a')\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    n = int(input())\n\n    result = repeatedString(s, n)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Jumping on the Clouds","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the jumpingOnClouds function below.\ndef jumpingOnClouds(c):\n    i=0\n    result=0\n    while i\u003c(len(c)-1):\n        result+=1\n        if (i+2)\u003e=len(c):\n            i=i+2\n        elif not c[i+2]: i=i+2\n        else: i=i+1\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = jumpingOnClouds(c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Equalize the Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the equalizeArray function below.\ndef equalizeArray(arr):\n    return len(arr)-max(set(arr),key=arr.count)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = equalizeArray(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Equalize the Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the equalizeArray function below.\ndef equalizeArray(arr):\n    return n-arr.count(max(set(arr),key=arr.count))\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = equalizeArray(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r_q, c_q, obstacles):\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    result=0\n    f1,f2,f3,f4,f5,f6,f7,f8=0,0,0,0,0,0,0,0\n    for i in range(n):\n        if [n-(r_q-1+i),c_q-1] not in obstacles:\n            if (r_q-1+i)\u003cn and f7==0: matrix[r_q-1+i][c_q-1]=1\n        else: f7=1\n        if [n-(r_q-1-i),c_q-1] not in obstacles:\n            if (r_q-1-i)\u003e=0 and f8==0: matrix[r_q-1-i][c_q-1]=1\n        else: f8=1\n        if [n-(r_q-1),c_q-1+i] not in obstacles:\n            if c_q-1+i\u003cn and f5==0: matrix[r_q-1][c_q-1+i]=1\n        else: f5=1\n        if [n-(r_q-1),c_q-1-i] not in obstacles:\n            if c_q-1-i\u003e=0 and f6==0: matrix[r_q-1][c_q-1-i]=1\n        else: f6=1\n        if [n-(r_q-1+i),c_q-1+i] not in obstacles:\n            if r_q-1+i\u003cn and c_q-1+i\u003cn and f1==0: matrix[r_q-1+i][c_q-1+i]=1\n        else: f1=1\n        if [n-(r_q-1+i),c_q-1-i] not in obstacles:\n            if r_q-1+i\u003cn and c_q-1-i\u003e=0 and f2==0: matrix[r_q-1+i][c_q-1-i]=1\n        else: f2=1\n        if [n-(r_q-1-i),c_q-1+i] not in obstacles:\n            if r_q-1-i\u003e=0 and c_q-1+i\u003cn and f3==0: matrix[r_q-1-i][c_q-1+i]=1\n        else: f3=1\n        if [n-(r_q-1-i),c_q-1-i] not in obstacles:\n            if r_q-1-i\u003e=0 and c_q-1-i\u003e=0 and f4==0: matrix[r_q-1-i][c_q-1-i]=1\n        else: f4=1\n    print(matrix)\n    result=sum(map(sum,matrix))\n    return result-1\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n\n","score":0.030487804878,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r_q, c_q, obstacles):\n    matrix = [[0 for i in range(n)] for j in range(n)]\n    result=0\n    f1,f2,f3,f4,f5,f6,f7,f8=0,0,0,0,0,0,0,0\n    for i in range(n):\n        if [n-(r_q-1+i),c_q-1] not in obstacles:\n            if (r_q-1+i)\u003cn and f7==0: matrix[r_q-1+i][c_q-1]=1\n        else: f7=1\n        if [n-(r_q-1-i),c_q-1] not in obstacles:\n            if (r_q-1-i)\u003e=0 and f8==0: matrix[r_q-1-i][c_q-1]=1\n        else: f8=1\n        if [n-(r_q-1),c_q-1+i] not in obstacles:\n            if c_q-1+i\u003cn and f5==0: matrix[r_q-1][c_q-1+i]=1\n        else: f5=1\n        if [n-(r_q-1),c_q-1-i] not in obstacles:\n            if c_q-1-i\u003e=0 and f6==0: matrix[r_q-1][c_q-1-i]=1\n        else: f6=1\n        if [n-(r_q-1+i),c_q-1+i] not in obstacles:\n            if r_q-1+i\u003cn and c_q-1+i\u003cn and f1==0: matrix[r_q-1+i][c_q-1+i]=1\n        else: f1=1\n        if [n-(r_q-1+i),c_q-1-i] not in obstacles:\n            if r_q-1+i\u003cn and c_q-1-i\u003e=0 and f2==0: matrix[r_q-1+i][c_q-1-i]=1\n        else: f2=1\n        if [n-(r_q-1-i),c_q-1+i] not in obstacles:\n            if r_q-1-i\u003e=0 and c_q-1+i\u003cn and f3==0: matrix[r_q-1-i][c_q-1+i]=1\n        else: f3=1\n        if [n-(r_q-1-i),c_q-1-i] not in obstacles:\n            if r_q-1-i\u003e=0 and c_q-1-i\u003e=0 and f4==0: matrix[r_q-1-i][c_q-1-i]=1\n        else: f4=1\n    result=sum(map(sum,matrix))\n    return result-1\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n\n","score":0.030487804878,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r_q, c_q, obstacles):\n    result=0\n    f1,f2,f3,f4,f5,f6,f7,f8=0,0,0,0,0,0,0,0\n    for i in range(n):\n        if [n-(r_q-1+i),c_q-1] not in obstacles:\n            if r_q-1+i\u003cn and f7==0: result+=1\n        else: f7=1\n        if [n-(r_q-1-i),c_q-1] not in obstacles:\n            if r_q-1-i\u003e=0 and f8==0: result+=1\n        else: f8=1\n        if [n-(r_q-1),c_q-1+i] not in obstacles:\n            if c_q-1+i\u003cn and f5==0: result+=1\n        else: f5=1\n        if [n-(r_q-1),c_q-1-i] not in obstacles:\n            if c_q-1-i\u003e=0 and f6==0: result+=1\n        else: f6=1\n        if [n-(r_q-1+i),c_q-1+i] not in obstacles:\n            if r_q-1+i\u003cn and c_q-1+i\u003cn and f1==0: result+=1\n        else: f1=1\n        if [n-(r_q-1+i),c_q-1-i] not in obstacles:\n            if r_q-1+i\u003cn and c_q-1-i\u003e=0 and f2==0: result+=1\n        else: f2=1\n        if [n-(r_q-1-i),c_q-1+i] not in obstacles:\n            if r_q-1-i\u003e=0 and c_q-1+i\u003cn and f3==0: result+=1\n        else: f3=1\n        if [n-(r_q-1-i),c_q-1-i] not in obstacles:\n            if r_q-1-i\u003e=0 and c_q-1-i\u003e=0 and f4==0: result+=1\n        else: f4=1\n    return result-8\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()","score":0.05487804878,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r_q, c_q, obstacles):\n    result=0\n    f1,f2,f3,f4,f5,f6,f7,f8=0,0,0,0,0,0,0,0\n    for i in range(n):\n        if [r_q+i,c_q] not in obstacles:\n            if r_q+i\u003c=n and f7==0: result+=1\n        else: f7=1\n        if [r_q-i,c_q] not in obstacles:\n            if r_q-i\u003e0 and f8==0: result+=1\n        else: f8=1\n        if [r_q,c_q+i] not in obstacles:\n            if c_q+i\u003c=n and f5==0: result+=1\n        else: f5=1\n        if [r_q,c_q-i] not in obstacles:\n            if c_q-i\u003e0 and f6==0: result+=1\n        else: f6=1\n        if [r_q+i,c_q+i] not in obstacles:\n            if r_q+i\u003c=n and c_q+i\u003c=n and f1==0: result+=1\n        else: f1=1\n        if [r_q+i,c_q-i] not in obstacles:\n            if r_q+i\u003c=n and c_q-i\u003e0 and f2==0: result+=1\n        else: f2=1\n        if [r_q-i,c_q+i] not in obstacles:\n            if r_q-i\u003e0 and c_q+i\u003c=n and f3==0: result+=1\n        else: f3=1\n        if [r_q-i,c_q-i] not in obstacles:\n            if r_q-i\u003e0 and c_q-i\u003e0 and f4==0: result+=1\n        else: f4=1\n    return result-8\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()","score":0.634146341463,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r_q, c_q, obstacles):\n    result=0\n    f1,f2,f3,f4,f5,f6,f7,f8=0,0,0,0,0,0,0,0\n    for i in range(n):\n        if [r_q+i,c_q] not in obstacles:\n            if r_q+i\u003c=n and f7==0: result+=1\n        else: f7=1\n        if [r_q-i,c_q] not in obstacles:\n            if r_q-i\u003e0 and f8==0: result+=1\n        else: f8=1\n        if [r_q,c_q+i] not in obstacles:\n            if c_q+i\u003c=n and f5==0: result+=1\n        else: f5=1\n        if [r_q,c_q-i] not in obstacles:\n            if c_q-i\u003e0 and f6==0: result+=1\n        else: f6=1\n        if [r_q+i,c_q+i] not in obstacles:\n            if r_q+i\u003c=n and c_q+i\u003c=n and f1==0: result+=1\n        else: f1=1\n        if [r_q+i,c_q-i] not in obstacles:\n            if r_q+i\u003c=n and c_q-i\u003e0 and f2==0: result+=1\n        else: f2=1\n        if [r_q-i,c_q+i] not in obstacles:\n            if r_q-i\u003e0 and c_q+i\u003c=n and f3==0: result+=1\n        else: f3=1\n        if [r_q-i,c_q-i] not in obstacles:\n            if r_q-i\u003e0 and c_q-i\u003e0 and f4==0: result+=1\n        else: f4=1\n    return result-8\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r_q, c_q, obstacles):\n    result=0\n    f1,f2,f3,f4,f5,f6,f7,f8=0,0,0,0,0,0,0,0\n    for i in range(n):\n        if [r_q+i,c_q] not in obstacles:\n            if r_q+i\u003c=n and f7==0: result+=1\n        else: f7=1\n        if [r_q-i,c_q] not in obstacles:\n            if r_q-i\u003e0 and f8==0: result+=1\n        else: f8=1\n        if [r_q,c_q+i] not in obstacles:\n            if c_q+i\u003c=n and f5==0: result+=1\n        else: f5=1\n        if [r_q,c_q-i] not in obstacles:\n            if c_q-i\u003e0 and f6==0: result+=1\n        else: f6=1\n        if [r_q+i,c_q+i] not in obstacles:\n            if r_q+i\u003c=n and c_q+i\u003c=n and f1==0: result+=1\n        else: f1=1\n        if [r_q+i,c_q-i] not in obstacles:\n            if r_q+i\u003c=n and c_q-i\u003e0 and f2==0: result+=1\n        else: f2=1\n        if [r_q-i,c_q+i] not in obstacles:\n            if r_q-i\u003e0 and c_q+i\u003c=n and f3==0: result+=1\n        else: f3=1\n        if [r_q-i,c_q-i] not in obstacles:\n            if r_q-i\u003e0 and c_q-i\u003e0 and f4==0: result+=1\n        else: f4=1\n    return result-8\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()","score":0.634146341463,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r_q, c_q, obstacles):\n    result=0\n    f1,f2,f3,f4,f5,f6,f7,f8=0,0,0,0,0,0,0,0\n    for i in range(n):\n        if f1==f2==f3==f4==f5==f6==f7==f8==1: break\n        if [r_q+i,c_q] not in obstacles:\n            if r_q+i\u003c=n and f7==0: result+=1\n        else: f7=1\n        if [r_q-i,c_q] not in obstacles:\n            if r_q-i\u003e0 and f8==0: result+=1\n        else: f8=1\n        if [r_q,c_q+i] not in obstacles:\n            if c_q+i\u003c=n and f5==0: result+=1\n        else: f5=1\n        if [r_q,c_q-i] not in obstacles:\n            if c_q-i\u003e0 and f6==0: result+=1\n        else: f6=1\n        if [r_q+i,c_q+i] not in obstacles:\n            if r_q+i\u003c=n and c_q+i\u003c=n and f1==0: result+=1\n        else: f1=1\n        if [r_q+i,c_q-i] not in obstacles:\n            if r_q+i\u003c=n and c_q-i\u003e0 and f2==0: result+=1\n        else: f2=1\n        if [r_q-i,c_q+i] not in obstacles:\n            if r_q-i\u003e0 and c_q+i\u003c=n and f3==0: result+=1\n        else: f3=1\n        if [r_q-i,c_q-i] not in obstacles:\n            if r_q-i\u003e0 and c_q-i\u003e0 and f4==0: result+=1\n        else: f4=1\n    return result-8\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()","score":0.756097560976,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r_q, c_q, obstacles):\n    result=0\n    f1,f2,f3,f4,f5,f6,f7,f8=0,0,0,0,0,0,0,0\n    for i in range(n):\n        if f1==f2==f3==f4==f5==f6==f7==f8==1: break\n        if f7==0:\n            if [r_q+i,c_q] not in obstacles:\n                if r_q+i\u003c=n: result+=1\n            else: f7=1\n        if f8==0:\n            if [r_q-i,c_q] not in obstacles:\n                if r_q-i\u003e0: result+=1\n            else: f8=1\n        if f5==0:\n            if [r_q,c_q+i] not in obstacles:\n                if c_q+i\u003c=n: result+=1\n            else: f5=1\n        if f6==0:\n            if [r_q,c_q-i] not in obstacles:\n                if c_q-i\u003e0: result+=1\n            else: f6=1\n        if f1==0:\n            if [r_q+i,c_q+i] not in obstacles:\n                if r_q+i\u003c=n and c_q+i\u003c=n: result+=1\n            else: f1=1\n        if f2==0:\n            if [r_q+i,c_q-i] not in obstacles:\n                if r_q+i\u003c=n and c_q-i\u003e0: result+=1\n            else: f2=1\n        if f3==0:\n            if [r_q-i,c_q+i] not in obstacles:\n                if r_q-i\u003e0 and c_q+i\u003c=n: result+=1\n            else: f3=1\n        if f4==0:\n            if [r_q-i,c_q-i] not in obstacles:\n                if r_q-i\u003e0 and c_q-i\u003e0: result+=1\n            else: f4=1\n    return result-8\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()","score":0.756097560976,"language":"python3"},{"contest":"Master","challenge":"ACM ICPC Team","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the acmTeam function below.\ndef acmTeam(topic):\n    x=0\n    res=0\n    result=0\n    for i in range(n):\n        for j in range(i,n):\n            x=int(topic[i],2) | int(topic[j],2)\n            if str(bin(x)).count('1')==res: result+=1\n            if str(bin(x)).count('1')\u003eres: result=1\n            res=max(str(bin(x)).count('1'),res)\n            x=0\n    return [res,result]\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    topic = []\n\n    for _ in range(n):\n        topic_item = input()\n        topic.append(topic_item)\n\n    result = acmTeam(topic)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Taum and B'day","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the taumBday function below.\ndef taumBday(b, w, bc, wc, z):\n    if bc+z\u003cwc:\n        return (bc+z)*w+b*bc\n    elif wc+z\u003cbc:\n        return (wc+z)*b+w*wc\n    else: return b*bc+w*wc\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        bw = input().split()\n\n        b = int(bw[0])\n\n        w = int(bw[1])\n\n        bcWcz = input().split()\n\n        bc = int(bcWcz[0])\n\n        wc = int(bcWcz[1])\n\n        z = int(bcWcz[2])\n\n        result = taumBday(b, w, bc, wc, z)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the organizingContainers function below.\ndef organizingContainers(container):\n    result=[]\n    for i in range(n):\n        result.append(sum([j[i] for j in container]))\n    if len(set(result))==1: return 'Possible'\n    else: return 'Impossible'\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        container = []\n\n        for _ in range(n):\n            container.append(list(map(int, input().rstrip().split())))\n\n        result = organizingContainers(container)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the organizingContainers function below.\ndef organizingContainers(container):\n    result=[]\n    for i in range(n):\n        result.append(sum([j[i] for j in container]))\n    if len(set(result))==1: return 'Possible'\n    else: return 'Impossible'\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        container = []\n\n        for _ in range(n):\n            container.append(list(map(int, input().rstrip().split())))\n\n        result = organizingContainers(container)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r, c, obstacles):\n    result=0\n    o1=o2=o3=o4=o5=o6=o7=o8=[n+1,n+1]\n    for i in obstacles:\n        if i[0]==r and i[1]\u003ec:\n            o1=[r,min(i[1]-c,o1[1])]\n        if i[0]==r and i[1]\u003cc:\n            o2=[r,min(c-i[1],o2[1])]\n        if i[1]==c and i[0]\u003er:\n            o3=[min(i[0]-r,o3[0]),c]\n        if i[1]==c and i[0]\u003cr:\n            o4=[min(r-i[0],o4[0]),c]\n        if i[0]\u003er and i[1]\u003ec and i[0]-r==i[1]-c:\n            o5=[min(i[0]-r,o5[0]),min(i[1]-c,o5[1])]\n        if i[0]\u003er and i[1]\u003cc and i[0]-r==c-i[1]:\n            o6=[min(i[0]-r,o6[0]),min(c-i[1],o6[1])]   \n        if i[0]\u003cr and i[1]\u003cc and r-i[0]==c-i[1]:\n            o7=[min(r-i[0],o7[0]),min(c-i[1],o7[1])] \n        if i[0]\u003cr and i[1]\u003ec and r-i[0]==i[1]-c:\n            o8=[min(r-i[0],o8[0]),min(i[1]-c,o8[1])]  \n    obstacles=[]\n    if o1!=[n+1,n+1]:\n        o1=[r,c+o1[1]]\n        result+=o1[1]-c-1\n    else: result+=n-c\n    if o2!=[n+1,n+1]:\n        o2=[r,c-o2[1]]\n        result+=c-o2[1]-1\n    else: result+=c-1\n    if o3!=[n+1,n+1]:\n        o3=[r+o3[0],c]\n        result+=o3[0]-r-1\n    else: result+=n-r\n    if o4!=[n+1,n+1]:\n        o4=[r-o4[0],c]\n        result+=r-o4[0]-1\n    else: result+=r-1\n    if o5!=[n+1,n+1]:\n        o5=[r+o5[0],c+o5[1]]\n        result+=o5[0]-r-1\n    else: result+=min(n-c,n-r)\n    if o6!=[n+1,n+1]:\n        o6=[r+o6[0],c-o6[1]]\n        result+=o5[0]-r-1\n    else: result+=min(n-r,c-1)\n    if o7!=[n+1,n+1]:\n        o7=[r-o7[0],c-o7[1]]\n        result+=r-o7[0]-1\n    else: result+=min(r-1,c-1)\n    if o8!=[n+1,n+1]:\n        o8=[r-o8[0],c+o8[1]]\n        result+=r-o8[0]-1\n    else: result+=min(n-c,r-1)\n    return result\n\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.756097560976,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r, c, obstacles):\n    result=0\n    o1=o2=o3=o4=o5=o6=o7=o8=[n+1,n+1]\n    for i in obstacles:\n        if i[0]==r and i[1]\u003ec:\n            o1=[r,min(i[1]-c,o1[1])]\n        if i[0]==r and i[1]\u003cc:\n            o2=[r,min(c-i[1],o2[1])]\n        if i[1]==c and i[0]\u003er:\n            o3=[min(i[0]-r,o3[0]),c]\n        if i[1]==c and i[0]\u003cr:\n            o4=[min(r-i[0],o4[0]),c]\n        if i[0]\u003er and i[1]\u003ec and i[0]-r==i[1]-c:\n            o5=[min(i[0]-r,o5[0]),min(i[1]-c,o5[1])]\n        if i[0]\u003er and i[1]\u003cc and i[0]-r==c-i[1]:\n            o6=[min(i[0]-r,o6[0]),min(c-i[1],o6[1])]   \n        if i[0]\u003cr and i[1]\u003cc and r-i[0]==c-i[1]:\n            o7=[min(r-i[0],o7[0]),min(c-i[1],o7[1])] \n        if i[0]\u003cr and i[1]\u003ec and r-i[0]==i[1]-c:\n            o8=[min(r-i[0],o8[0]),min(i[1]-c,o8[1])]  \n    obstacles=[]\n    if o1!=[n+1,n+1]:\n        o1=[r,c+o1[1]]\n        result+=o1[1]-c-1\n    else: result+=n-c\n    if o2!=[n+1,n+1]:\n        o2=[r,c-o2[1]]\n        result+=c-o2[1]-1\n    else: result+=c-1\n    if o3!=[n+1,n+1]:\n        o3=[r+o3[0],c]\n        result+=o3[0]-r-1\n    else: result+=n-r\n    if o4!=[n+1,n+1]:\n        o4=[r-o4[0],c]\n        result+=r-o4[0]-1\n    else: result+=r-1\n    if o5!=[n+1,n+1]:\n        o5=[r+o5[0],c+o5[1]]\n        result+=o5[0]-r-1\n    else: result+=min(n-c,n-r)\n    if o6!=[n+1,n+1]:\n        o6=[r+o6[0],c-o6[1]]\n        result+=o5[0]-r-1\n    else: result+=min(n-r,c-1)\n    if o7!=[n+1,n+1]:\n        o7=[r-o7[0],c-o7[1]]\n        result+=r-o7[0]-1\n    else: result+=min(r-1,c-1)\n    if o8!=[n+1,n+1]:\n        o8=[r-o8[0],c+o8[1]]\n        result+=r-o8[0]-1\n    else: result+=min(n-c,r-1)\n    return result\n\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.756097560976,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r, c, obstacles):\n    result=0\n    o1=o2=o3=o4=o5=o6=o7=o8=[n+1,n+1]\n    for i in obstacles:\n        if i[0]==r and i[1]\u003ec:\n            o1=[r,min(i[1]-c,o1[1])]\n        if i[0]==r and i[1]\u003cc:\n            o2=[r,min(c-i[1],o2[1])]\n        if i[1]==c and i[0]\u003er:\n            o3=[min(i[0]-r,o3[0]),c]\n        if i[1]==c and i[0]\u003cr:\n            o4=[min(r-i[0],o4[0]),c]\n        if i[0]\u003er and i[1]\u003ec and i[0]-r==i[1]-c:\n            o5=[min(i[0]-r,o5[0]),min(i[1]-c,o5[1])]\n        if i[0]\u003er and i[1]\u003cc and i[0]-r==c-i[1]:\n            o6=[min(i[0]-r,o6[0]),min(c-i[1],o6[1])]   \n        if i[0]\u003cr and i[1]\u003cc and r-i[0]==c-i[1]:\n            o7=[min(r-i[0],o7[0]),min(c-i[1],o7[1])] \n        if i[0]\u003cr and i[1]\u003ec and r-i[0]==i[1]-c:\n            o8=[min(r-i[0],o8[0]),min(i[1]-c,o8[1])]  \n    obstacles=[]\n    if o1!=[n+1,n+1]:\n        o1=[r,c+o1[1]]\n        result+=o1[1]-c-1\n    else: result+=n-c\n    if o2!=[n+1,n+1]:\n        o2=[r,c-o2[1]]\n        result+=c-o2[1]-1\n    else: result+=c-1\n    if o3!=[n+1,n+1]:\n        o3=[r+o3[0],c]\n        result+=o3[0]-r-1\n    else: result+=n-r\n    if o4!=[n+1,n+1]:\n        o4=[r-o4[0],c]\n        result+=r-o4[0]-1\n    else: result+=r-1\n    if o5!=[n+1,n+1]:\n        o5=[r+o5[0],c+o5[1]]\n        result+=o5[0]-r-1\n    else: result+=min(n-c,n-r)\n    if o6!=[n+1,n+1]:\n        o6=[r+o6[0],c-o6[1]]\n        result+=o5[0]-r-1\n    else: result+=min(n-r,c-1)\n    if o7!=[n+1,n+1]:\n        o7=[r-o7[0],c-o7[1]]\n        result+=r-o7[0]-1\n    else: result+=min(r-1,c-1)\n    if o8!=[n+1,n+1]:\n        o8=[r-o8[0],c+o8[1]]\n        result+=r-o8[0]-1\n    else: result+=min(n-c,r-1)\n    return result\n\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.756097560976,"language":"python3"},{"contest":"Master","challenge":"Queen's Attack II","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the queensAttack function below.\ndef queensAttack(n, k, r, c, obstacles):\n    result=0\n    o1=o2=o3=o4=o5=o6=o7=o8=[n+1,n+1]\n    for i in obstacles:\n        if i[0]==r and i[1]\u003ec:\n            o1=[r,min(i[1]-c,o1[1])]\n        if i[0]==r and i[1]\u003cc:\n            o2=[r,min(c-i[1],o2[1])]\n        if i[1]==c and i[0]\u003er:\n            o3=[min(i[0]-r,o3[0]),c]\n        if i[1]==c and i[0]\u003cr:\n            o4=[min(r-i[0],o4[0]),c]\n        if i[0]\u003er and i[1]\u003ec and i[0]-r==i[1]-c:\n            o5=[min(i[0]-r,o5[0]),min(i[1]-c,o5[1])]\n        if i[0]\u003er and i[1]\u003cc and i[0]-r==c-i[1]:\n            o6=[min(i[0]-r,o6[0]),min(c-i[1],o6[1])]   \n        if i[0]\u003cr and i[1]\u003cc and r-i[0]==c-i[1]:\n            o7=[min(r-i[0],o7[0]),min(c-i[1],o7[1])] \n        if i[0]\u003cr and i[1]\u003ec and r-i[0]==i[1]-c:\n            o8=[min(r-i[0],o8[0]),min(i[1]-c,o8[1])]  \n    obstacles=[]\n    if o1!=[n+1,n+1]:\n        o1=[r,c+o1[1]]\n        result+=o1[1]-c-1\n        print(result)\n    else: result+=n-c;print(result)\n    if o2!=[n+1,n+1]:\n        o2=[r,c-o2[1]]\n        result+=c-o2[1]-1\n        print(result)\n    else: result+=c-1;print(result)\n    if o3!=[n+1,n+1]:\n        o3=[r+o3[0],c]\n        result+=o3[0]-r-1\n        print(result)\n    else: result+=n-r;print(result)\n    if o4!=[n+1,n+1]:\n        o4=[r-o4[0],c]\n        result+=r-o4[0]-1\n        print(result)\n    else: result+=r-1;print(result)\n    if o5!=[n+1,n+1]:\n        o5=[r+o5[0],c+o5[1]]\n        result+=o5[0]-r-1\n        print(result)\n    else: result+=min(n-c,n-r);print(result)\n    if o6!=[n+1,n+1]:\n        o6=[r+o6[0],c-o6[1]]\n        result+=o6[0]-r-1\n        print(result)\n    else: result+=min(n-r,c-1);print(result)\n    if o7!=[n+1,n+1]:\n        o7=[r-o7[0],c-o7[1]]\n        result+=r-o7[0]-1\n        print(result)\n    else: result+=min(r-1,c-1);print(result)\n    if o8!=[n+1,n+1]:\n        o8=[r-o8[0],c+o8[1]]\n        result+=r-o8[0]-1\n        print(result)\n    else: result+=min(n-c,r-1);print(result)\n    print(o1,o2,o3,o4,o5,o6,o7,o8)\n    return result\n\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    r_qC_q = input().split()\n\n    r_q = int(r_qC_q[0])\n\n    c_q = int(r_qC_q[1])\n\n    obstacles = []\n\n    for _ in range(k):\n        obstacles.append(list(map(int, input().rstrip().split())))\n\n    result = queensAttack(n, k, r_q, c_q, obstacles)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the kaprekarNumbers function below.\ndef kaprekarNumbers(p, q):\n    for i in range(p,q+1):\n        x=str(i**2)\n        y=x[:len(x)-len(str(i))]\n        z=x[len(x)-len(str(i)):]\n        if y=='':y='0'\n        if z=='':z='0'\n        if int(y)+int(z)==i:\n            print(i, end=' ')\n\nif __name__ == '__main__':\n    p = int(input())\n\n    q = int(input())\n\n    kaprekarNumbers(p, q)\n","score":0.8,"language":"python3"},{"contest":"Master","challenge":"Modified Kaprekar Numbers","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the kaprekarNumbers function below.\ndef kaprekarNumbers(p, q):\n    range_error=1\n    for i in range(p,q+1):\n\n        x=str(i**2)\n        y=x[:len(x)-len(str(i))]\n        z=x[len(x)-len(str(i)):]\n        if y=='':y='0'\n        if z=='':z='0'\n        if int(y)+int(z)==i:\n            range_error=0\n            print(i, end=' ')\n    if range_error: print('INVALID RANGE')\nif __name__ == '__main__':\n    p = int(input())\n\n    q = int(input())\n\n    kaprekarNumbers(p, q)\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Chocolate Feast ","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the chocolateFeast function below.\ndef chocolateFeast(n, c, m):\n    w=n//c\n    res=n//c\n    while w\u003e=m:\n        res+=w//m\n        x=w//m\n        w=x+w%m\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        ncm = input().split()\n\n        n = int(ncm[0])\n\n        c = int(ncm[1])\n\n        m = int(ncm[2])\n\n        result = chocolateFeast(n, c, m)\n\n        fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Service Lane","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the serviceLane function below.\ndef serviceLane(n, cases):\n    res=[]\n    for i in range(t):\n        res.append(min(width[cases[i][0]:cases[i][1]+1]))\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nt = input().split()\n\n    n = int(nt[0])\n\n    t = int(nt[1])\n\n    width = list(map(int, input().rstrip().split()))\n\n    cases = []\n\n    for _ in range(t):\n        cases.append(list(map(int, input().rstrip().split())))\n\n    result = serviceLane(n, cases)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the organizingContainers function below.\ndef organizingContainers(container):\n    Possible=1\n    for i in range(len(container)):\n        if sum(container[i])==sum(x[i] for x in container):\n            pass\n        else: Possible=0\n    if Possible: return 'Possible'\n    else: return 'Impossible'\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        container = []\n\n        for _ in range(n):\n            container.append(list(map(int, input().rstrip().split())))\n\n        result = organizingContainers(container)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the organizingContainers function below.\ndef organizingContainers(container):\n    Possible=1\n    for i in range(len(container)):\n        if sum(container[i])==sum(x[i] for x in container):\n            pass\n        else: Possible=0\n    if Possible: return 'Possible'\n    else: return 'Impossible'\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        container = []\n\n        for _ in range(n):\n            container.append(list(map(int, input().rstrip().split())))\n\n        result = organizingContainers(container)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the organizingContainers function below.\ndef organizingContainers(container):\n    Possible=1\n    v,h=[],[]\n    for i in range(len(container)):\n        h.append(sum(container[i]))\n        v.append(sum(x[i] for x in container))\n    if h==v: return 'Possible'\n    else: return 'Impossible'\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        container = []\n\n        for _ in range(n):\n            container.append(list(map(int, input().rstrip().split())))\n\n        result = organizingContainers(container)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the organizingContainers function below.\ndef organizingContainers(container):\n    Possible=1\n    v,h=[],[]\n    for i in range(len(container)):\n        h.append(sum(container[i]))\n        v.append(sum([x[i] for x in container]))\n    if h==v: return 'Possible'\n    else: return 'Impossible'\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        container = []\n\n        for _ in range(n):\n            container.append(list(map(int, input().rstrip().split())))\n\n        result = organizingContainers(container)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the organizingContainers function below.\ndef organizingContainers(container):\n    Possible=1\n    v,h=[],[]\n    for i in range(len(container)):\n        h.append(sum(container[i]))\n        v.append(sum([x[i] for x in container]))\n    print(h,v)\n    if h==v: return 'Possible'\n    else: return 'Impossible'\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        container = []\n\n        for _ in range(n):\n            container.append(list(map(int, input().rstrip().split())))\n\n        result = organizingContainers(container)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Organizing Containers of Balls","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the organizingContainers function below.\ndef organizingContainers(container):\n    Possible=1\n    v,h=[],[]\n    for i in range(len(container)):\n        h.append(sum(container[i]))\n        v.append(sum([x[i] for x in container]))\n    h.sort()\n    v.sort()\n    if h==v: return 'Possible'\n    else: return 'Impossible'\n        \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    q = int(input())\n\n    for q_itr in range(q):\n        n = int(input())\n\n        container = []\n\n        for _ in range(n):\n            container.append(list(map(int, input().rstrip().split())))\n\n        result = organizingContainers(container)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Encryption","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the encryption function below.\ndef encryption(s):\n    res=[]\n    res2=[]\n    result=''\n    s+=' '*(math.ceil(len(s)**0.5)**2-len(s))\n    for i in range(int(len(s)**0.5)):\n        res.append(s[i*int(len(s)**0.5):i*int(len(s)**0.5)+int(len(s)**0.5)])\n    for j in range(int(len(s)**0.5)):\n        res2.append([i[j] for i in res if i[j]!=' '])\n        res2[j]=''.join(res2[j])\n    return ' '.join(res2)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = encryption(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Encryption","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the encryption function below.\ndef encryption(s):\n    res=[]\n    res2=[]\n    result=''\n    s+=' '*(math.ceil(len(s)**0.5)**2-len(s))\n    for i in range(int(len(s)**0.5)):\n        res.append(s[i*int(len(s)**0.5):i*int(len(s)**0.5)+int(len(s)**0.5)])\n    for j in range(int(len(s)**0.5)):\n        res2.append([i[j] for i in res if i[j]!=' '])\n        res2[j]=''.join(res2[j])\n    return ' '.join(res2)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = encryption(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Bigger is Greater","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the biggerIsGreater function below.\ndef biggerIsGreater(w):\n    buf='{'\n    j=0\n    chars = [i for i in w]\n    x=len(chars)-1\n    while x\u003e0 and chars[x-1]\u003e=chars[x]:\n        x-=1\n    if not x: return -1\n    swap=chars[x-1]\n    for i in range(x,len(chars)):\n        if chars[i]\u003eswap and (ord(chars[i])-ord(swap))\u003cord(buf):\n            buf=chr(ord(chars[i])-ord(swap))\n            j=i\n    chars[x-1]=chars[j]\n    chars[j]=swap\n    chars[x:]=sorted(chars[x:])\n    if ''.join(i for i in chars)==w: return 'no answer'\n    else: return ''.join(i for i in chars)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    T = int(input())\n\n    for T_itr in range(T):\n        w = input()\n\n        result = biggerIsGreater(w)\n        if result==-1: result='no answer'\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Beautiful Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the beautifulTriplets function below.\ndef beautifulTriplets(d, arr):\n    result=0\n    for i in arr:\n        if i+d in arr and i+2*d in arr: result+=1\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nd = input().split()\n\n    n = int(nd[0])\n\n    d = int(nd[1])\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = beautifulTriplets(d, arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Beautiful Triplets","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the beautifulTriplets function below.\ndef beautifulTriplets(d, arr):\n    result=0\n    for i in arr:\n        if i+d in arr and i+2*d in arr: result+=1\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nd = input().split()\n\n    n = int(nd[0])\n\n    d = int(nd[1])\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = beautifulTriplets(d, arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Minimum Distances","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumDistances function below.\ndef minimumDistances(a):\n    d=0\n    for i in a:\n        if a.count(i)\u003e1:\n            if not d:\n                d=abs(a.index(i,a.index(i)+1)-a.index(i))\n            else: d=min(d,abs(a.index(i,a.index(i)+1)-a.index(i)))\n    if not d: return -1\n    else: return d\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = minimumDistances(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Minimum Distances","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the minimumDistances function below.\ndef minimumDistances(a):\n    d=0\n    for i in a:\n        if a.count(i)\u003e1:\n            if not d:\n                d=abs(a.index(i,a.index(i)+1)-a.index(i))\n            else: d=min(d,abs(a.index(i,a.index(i)+1)-a.index(i)))\n    if not d: return -1\n    else: return d\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    a = list(map(int, input().rstrip().split()))\n\n    result = minimumDistances(a)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Halloween Sale","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the howManyGames function below.\ndef howManyGames(p, d, m, s):\n    res=0\n    money=0\n    while money\u003c=s:\n        res+=1\n        money+=p\n        if p-d\u003em:\n            p-=d\n        else: p=m\n    return res-1\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    pdms = input().split()\n\n    p = int(pdms[0])\n\n    d = int(pdms[1])\n\n    m = int(pdms[2])\n\n    s = int(pdms[3])\n\n    answer = howManyGames(p, d, m, s)\n\n    fptr.write(str(answer) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Time in Words","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the timeInWords function below.\ndef timeInWords(h, m):\n    hours={\n        1: 'one',\n        2: 'two',\n        3: 'three',\n        4: 'four',\n        5: 'five',\n        6: 'six',\n        7: 'seven',\n        8: 'eight',\n        9: 'nine',\n        10: 'ten',\n        11: 'eleven',\n        12: 'twelve',  \n        13: 'one'\n    }\n    mins={\n        0: 'o\\' clock',\n        1: 'one minute',\n        2: 'two minutes',\n        3: 'three minutes',\n        4: 'four minutes',\n        5: 'five minutes',\n        6: 'six minutes',\n        7: 'seven minutes',\n        8: 'eight minutes',\n        9: 'nine minutes',\n        10: 'ten minutes',\n        11: 'eleven minutes',\n        12: 'twelve minutes',\n        13: 'thirteen minutes',\n        14: 'fourteen minutes',\n        15: 'quarter',\n        16: 'sixteen minutes',\n        17: 'seventeen minutes',\n        18: 'eighteen minutes',\n        19: 'nineteen minutes',\n        20: 'twenty minutes',\n        21: 'twenty one minutes',\n        22: 'twenty two minutes',\n        23: 'twenty three minutes',\n        24: 'twenty four minutes',\n        25: 'twenty five minutes',\n        26: 'twenty six minutes',\n        27: 'twenty seven minutes',\n        28: 'twenty eight minutes',\n        29: 'twenty nine minutes',\n        30: 'half'\n    }\n    if m==0: return hours[h]+' '+mins[m]\n    if m\u003c=30: return mins[m]+' past '+hours[h]\n    if m\u003e30: return mins[60-m]+' to '+hours[h+1]\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    h = int(input())\n\n    m = int(input())\n\n    result = timeInWords(h, m)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Lisa's Workbook","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the workbook function below.\ndef workbook(n, k, arr):\n    page=1\n    res=0\n    for i in arr:\n        for j in range(1,i+1):\n            if j==page: res+=1\n            if j%k==0: page+=1\n        if i%k!=0: page+=1\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nk = input().split()\n\n    n = int(nk[0])\n\n    k = int(nk[1])\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = workbook(n, k, arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Flatland Space Stations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the flatlandSpaceStations function below.\ndef flatlandSpaceStations(n, c):\n    distances=[]\n    for i in range(n):\n        dist=n\n        for j in c:\n            dist=min(abs(i-j),dist)\n        distances.append(dist)\n    return max(distances)\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = flatlandSpaceStations(n, c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.854545454545,"language":"python3"},{"contest":"Master","challenge":"Flatland Space Stations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the flatlandSpaceStations function below.\ndef flatlandSpaceStations(n, c):\n    distances=0\n    for i in range(n):\n        dist=n\n        for j in c:\n            dist=min(abs(i-j),dist)\n        distances=max(distances,dist)\n    return distances\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = flatlandSpaceStations(n, c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.854545454545,"language":"python3"},{"contest":"Master","challenge":"Flatland Space Stations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the flatlandSpaceStations function below.\ndef flatlandSpaceStations(n, c):\n    distances=0\n    for i in range(n):\n        c.append(i)\n        c.sort()\n        dist=min(abs(c[c.index(i)]-c[c.index(i)-1]),abs(c[c.index(i)]-c[c.index(i)+1]))\n        c.remove(i)\n        distances=max(distances,dist)\n    return distances\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = flatlandSpaceStations(n, c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.181818181818,"language":"python3"},{"contest":"Master","challenge":"Flatland Space Stations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the flatlandSpaceStations function below.\ndef flatlandSpaceStations(n, c):\n    distances=0\n    for i in range(n):\n        c.append(i)\n        c.sort()\n        if c.index(i)==0:\n            dist=abs(c[c.index(i)]-c[c.index(i)+1])\n        elif c.index(i)==n:\n            dist=abs(c[c.index(i)]-c[c.index(i)-1])\n        else:\n            dist=min(abs(c[c.index(i)]-c[c.index(i)-1]),abs(c[c.index(i)]-c[c.index(i)+1]))\n        c.remove(i)\n        distances=max(distances,dist)\n    return distances\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = flatlandSpaceStations(n, c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.181818181818,"language":"python3"},{"contest":"Master","challenge":"Flatland Space Stations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the flatlandSpaceStations function below.\ndef flatlandSpaceStations(n, c):\n    distances=0\n    for i in range(n):\n        c.append(i)\n        c.sort()\n        if c.index(i)==0:\n            dist=abs(c[c.index(i)]-c[c.index(i)+1])\n        elif c.index(i)==len(c)-1:\n            dist=abs(c[c.index(i)]-c[c.index(i)-1])\n        else:\n            dist=min(abs(c[c.index(i)]-c[c.index(i)-1]),abs(c[c.index(i)]-c[c.index(i)+1]))\n        c.remove(i)\n        distances=max(distances,dist)\n    return distances\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = flatlandSpaceStations(n, c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.927272727273,"language":"python3"},{"contest":"Master","challenge":"Flatland Space Stations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the flatlandSpaceStations function below.\ndef flatlandSpaceStations(n, c):\n    distances=n\n    c.sort()\n    for i in range(len(c)-1):\n        distances=min(distances,(c[i]+c[i+1])//2)\n    return distances\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = flatlandSpaceStations(n, c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.072727272727,"language":"python3"},{"contest":"Master","challenge":"Flatland Space Stations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the flatlandSpaceStations function below.\ndef flatlandSpaceStations(n, c):\n    c.sort()\n    distances=max(c[0],n-c[m-1]-1)\n\n    for i in range(len(c)-1):\n        distances=max(distances,(abs(c[i]-c[i+1]))//2)\n    return distances\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    c = list(map(int, input().rstrip().split()))\n\n    result = flatlandSpaceStations(n, c)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Fair Rations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the fairRations function below.\ndef oddity(n):\n    return n%2\ndef fairRations(B):\n    result=0\n    ind=[]\n    odds=list(map(oddity, B))\n    print(odds)\n    if oddity(sum(odds)): return 'NO'\n    else:\n        for i in range(len(odds)):\n            if odds[i]: ind.append(i)\n        ind.sort()\n    for i in range(0,len(ind),2):\n        result+=(ind[i+1]-ind[i])*2\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    N = int(input())\n\n    B = list(map(int, input().rstrip().split()))\n\n    result = fairRations(B)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Fair Rations","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the fairRations function below.\ndef oddity(n):\n    return n%2\ndef fairRations(B):\n    result=0\n    ind=[]\n    odds=list(map(oddity, B))\n    print(odds)\n    if oddity(sum(odds)): return 'NO'\n    else:\n        for i in range(len(odds)):\n            if odds[i]: ind.append(i)\n        ind.sort()\n    for i in range(0,len(ind),2):\n        result+=(ind[i+1]-ind[i])*2\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    N = int(input())\n\n    B = list(map(int, input().rstrip().split()))\n\n    result = fairRations(B)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Cavity Map","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the cavityMap function below.\ndef cavityMap(grid):\n    for i in range(1,n-1):\n        for j in range(1,n-1):\n            if grid[i][j]\u003egrid[i+1][j] and grid[i][j]\u003egrid[i-1][j] and grid[i][j]\u003egrid[i][j+1] and grid[i][j]\u003egrid[i][j-1]:\n                grid[i]= grid[i][:j]+'X'+grid[i][j+1:]\n    return grid\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = cavityMap(grid)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Manasa and Stones","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the stones function below.\ndef stones(n, a, b):\n    a1=min(a,b)\n    b1=max(a,b)\n    res=[]\n    for i in range(n):\n        res.append(a1*(n-1-i)+b1*(i))\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    T = int(input())\n\n    for T_itr in range(T):\n        n = int(input())\n\n        a = int(input())\n\n        b = int(input())\n\n        result = stones(n, a, b)\n\n        fptr.write(' '.join(map(str, result)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.466666666667,"language":"python3"},{"contest":"Master","challenge":"Manasa and Stones","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the stones function below.\ndef stones(n, a, b):\n    a1=min(a,b)\n    b1=max(a,b)\n    res=[]\n    for i in range(n):\n        res.append(a1*(n-1-i)+b1*(i))\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    T = int(input())\n\n    for T_itr in range(T):\n        n = int(input())\n\n        a = int(input())\n\n        b = int(input())\n\n        result = stones(n, a, b)\n\n        fptr.write(' '.join(map(str, result)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.466666666667,"language":"python3"},{"contest":"Master","challenge":"Manasa and Stones","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the stones function below.\ndef stones(n, a, b):\n    a1=min(a,b)\n    b1=max(a,b)\n    res=[]\n    if (a1==b1): return [a1*(n-1)]\n    for i in range(n):\n        res.append(a1*(n-1-i)+b1*(i))\n    return res\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    T = int(input())\n\n    for T_itr in range(T):\n        n = int(input())\n\n        a = int(input())\n\n        b = int(input())\n\n        result = stones(n, a, b)\n\n        fptr.write(' '.join(map(str, result)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\ndef check_grid(n,m):\n    ok=0\n    for j in range(r):\n        if G[n+j][m:m+c]==P[j]:\n            ok=1\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        if P[0] in i:\n            if check_grid(G.index(i),i.index(P[0])): return 'YES'\n    return 'NO'\n            \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.529411764706,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\ndef check_grid(n,m):\n    ok=0\n    for j in range(r):\n        if m+c\u003e=C:\n            if G[n+j][m:]==P[j]: ok=1\n        elif G[n+j][m:m+c]==P[j]:\n            ok=1\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        if P[0] in i:\n            if check_grid(G.index(i),i.index(P[0])): return 'YES'\n    return 'NO'\n            \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.529411764706,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\ndef check_grid(n,m):\n    ok=0\n    for j in range(r):\n        if m+c\u003e=C:\n            if G[n+j][m:]==P[j]: ok=1\n        elif G[n+j][m:m+c]==P[j]:\n            ok=1\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        if P[0] in i:\n            if check_grid(G.index(i),i.index(P[0])): return 'YES'\n    return 'NO'\n            \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.529411764706,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\ndef check_grid(n,m):\n    if R-n\u003cr: return False\n    ok=0\n    for j in range(r):\n        if m+c\u003e=C:\n            if G[n+j][m:]==P[j]: ok=1\n        elif G[n+j][m:m+c]==P[j]:\n            ok=1\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        if P[0] in i:\n            if check_grid(G.index(i),i.index(P[0])): return 'YES'\n    return 'NO'\n            \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.529411764706,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\ndef check_grid(n,m):\n    if R-n\u003cr: return False\n    ok=0\n    for j in range(r):\n        if m+c\u003e=C:\n            if G[n+j][m:]==P[j]: ok=1\n        elif G[n+j][m:m+c]==P[j]:\n            ok=1\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        z=0\n        if P[0] in i:\n            for _ in range(i.count(P[0])):\n                if check_grid(G.index(i,z),i.index(P[0])): return 'YES'\n                z=G.index(i,z)+1\n    return 'NO'\n            \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.470588235294,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\n\ndef check_grid(n,m):\n    if R-n\u003cr: return False\n    ok=0\n    for j in range(r):\n        if m+c\u003e=C:\n            if G[n+j][m:]==P[j]: ok=1\n        elif G[n+j][m:m+c]==P[j]:\n            ok=1\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        z=0\n        if P[0] in i:\n            for _ in range(i.count(P[0])):\n                if check_grid(G.index(i,z),i.index(P[0])): return 'YES'\n                z=G.index(i,z)+1\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.470588235294,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\n\ndef check_grid(n,m):\n    if R-n\u003cr: return False\n    if C-m\u003cc: return False\n    ok=0\n    for j in range(r):\n        if m+c\u003e=C:\n            if G[n+j][m:]==P[j]: ok=1\n        elif G[n+j][m:m+c]==P[j]:\n            ok=1\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        z=0\n        if P[0] in i:\n            for _ in range(i.count(P[0])):\n                if check_grid(G.index(i,z),i.index(P[0])): return 'YES'\n                z=G.index(i,z)+1\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.470588235294,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\n\ndef check_grid(n,m):\n    if R-n\u003cr: return False\n    if C-m\u003cc: return False\n    ok=0\n    for j in range(r):\n        if m+c\u003e=C:\n            if G[n+j][m:]==P[j]: ok=1l print(n+j)\n        elif G[n+j][m:m+c]==P[j]:\n            ok=1;print(m+c)\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        z=0\n        if P[0] in i:\n            for _ in range(i.count(P[0])):\n                if check_grid(G.index(i,z),i.index(P[0])): return 'YES'\n                z=G.index(i,z)+1\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\n\ndef check_grid(n,m):\n    if R-n\u003cr: return False\n    if C-m\u003cc: return False\n    ok=0\n    for j in range(r):\n        if m+c\u003e=C:\n            if G[n+j][m:]==P[j]: ok=1; print(n+j)\n        elif G[n+j][m:m+c]==P[j]:\n            ok=1;print(m+c)\n        else: return False\n    return True\n    \ndef gridSearch(G, P):\n    for i in G:\n        z=0\n        if P[0] in i:\n            for _ in range(i.count(P[0])):\n                if check_grid(G.index(i,z),i.index(P[0])): return 'YES'\n                z=G.index(i,z)+1\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.470588235294,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\n\ndef check_grid(row,col):\n    for x in range(r):\n        for y in range(c):\n            if G[row+x][col+y]==P[x][y]: pass\n            else: return False\n    return True\ndef gridSearch(G, P):\n    for i in range(C-c):\n        for j in range(R-r):\n            if check_grid(i,j): return 'YES'\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.411764705882,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\n\ndef check_grid(row,col):\n    for x in range(r):\n        for y in range(c):\n            if G[row+x][col+y]==P[x][y]: pass\n            else: return False\n    return True\ndef gridSearch(G, P):\n    flag=0\n    for i in range(C-c):\n        for j in range(R-r):\n            if check_grid(i,j): flag=1\n    if flag: return 'YES'\n    else: return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.294117647059,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\n\ndef check_grid(row,col):\n    for x in range(r):\n        for y in range(c):\n            if G[row+x][col+y]==P[x][y]: pass\n            else: return False\n    return True\ndef gridSearch(G, P):\n    flag=0\n    for i in range(C-c):\n        for j in range(R-r):\n            if check_grid(j,i): flag=1\n    if flag: return 'YES'\n    else: return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.558823529412,"language":"python3"},{"contest":"Master","challenge":"The Grid Search","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the gridSearch function below.\n\ndef check_grid(row,col):\n    for x in range(r):\n        for y in range(c):\n            if G[row+x][col+y]==P[x][y]: pass\n            else: return False\n    return True\ndef gridSearch(G, P):\n    flag=0\n    for i in range(C-c+1):\n        for j in range(R-r+1):\n            if check_grid(j,i): flag=1\n    if flag: return 'YES'\n    else: return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        RC = input().split()\n\n        R = int(RC[0])\n\n        C = int(RC[1])\n\n        G = []\n\n        for _ in range(R):\n            G_item = input()\n            G.append(G_item)\n\n        rc = input().split()\n\n        r = int(rc[0])\n\n        c = int(rc[1])\n\n        P = []\n\n        for _ in range(r):\n            P_item = input()\n            P.append(P_item)\n\n        result = gridSearch(G, P)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Revising the Select Query I","code":"select * from city where countrycode='USA' and population\u003e100000;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Revising the Select Query II","code":"select name from city where countrycode='USA' and population\u003e120000;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Select All","code":"select * from city;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Select By ID","code":"select * from city where id=1661;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Japanese Cities' Attributes","code":"select * from city where countrycode='JPN'","score":0.0,"language":"oracle"},{"contest":"Master","challenge":"Japanese Cities' Attributes","code":"select * from city where countrycode='JPN';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Japanese Cities' Names","code":"select name from city where countrycode='JPN';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 1","code":"select city,state from station\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 1","code":"select city,state from station\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 3","code":"select distinct city from station where mod(id,2)=0;\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 4","code":"select count(city)-count(distinct city) from station;\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 5","code":"SELECT * FROM(SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY),CITY) WHERE ROWNUM = 1;\nSELECT * FROM(SELECT CITY, LENGTH(CITY) FROM STATION ORDER BY LENGTH(CITY) DESC,CITY) WHERE ROWNUM = 1;\n","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 6","code":"select distinct city from station where substr(city,1,1) in ('a','e','i','o','u');\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":0.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 6","code":"select distinct city from station where substr(city,1,1) in ('a','e','i','o','u','A','E','I','O','U');\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 7","code":"select distinct city from station where substr(city,-1,1) in ('a','e','i','o','u','A','E','I','O','U');\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 8","code":"SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(CITY,'^[aeiouAEIOU].*[aeiouAEIOU]$') ; \n","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 9","code":"SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(city,'^[^aeiouAEIOU]');\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 10","code":"SELECT DISTINCT CITY FROM STATION WHERE REGEXP_LIKE(CITY,'[^aeiouAEIOU]$');\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 11","code":"select distinct city from station where regexp_like(city,'^[^aeiouAEIOU]') or regexp_like(city,'[^aeiouAEIOU]$');\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 12","code":"select distinct city from station where regexp_like(city,'^[^aeiouAEIOU].*[^aeiouAEIOU]$');\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Higher Than 75 Marks","code":"SELECT name from students where marks\u003e75 order by substr(name,-3,3) asc;\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Employee Names","code":"select name from employee order by name;\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Employee Salaries","code":"select name from employee where salary\u003e2000 and months \u003c 10 order by employee_id;\n/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\nWrite a query that prints a list of employee names (i.e.: the name attribute) for employees in Employee having a salary greater than per month who have been employees for less than months. Sort your result by ascending employee_id.\n*/","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Type of Triangle","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\nSELECT CASE \n    WHEN A + B \u003e C AND A+C\u003eB AND B+C\u003eA THEN CASE \n        WHEN A = B AND B = C THEN 'Equilateral' \n        WHEN A = B OR B = C OR A = C THEN 'Isosceles' \n        WHEN A != B OR B != C OR A != C THEN 'Scalene' END \n    ELSE 'Not A Triangle' END FROM TRIANGLES;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"The PADS","code":"SELECT NAME || CASE occupation when 'Doctor' then '(D)' \nwhen 'Actor' then '(A)' \nwhen 'Singer' then '(S)' \nwhen 'Professor' then '(P)' end from occupations order by name;\nSELECT 'There are a total of ', COUNT(OCCUPATION), concat(LOWER(OCCUPATION),'s.') FROM OCCUPATIONS GROUP BY OCCUPATION ORDER BY COUNT(OCCUPATION) ASC, OCCUPATION ASC;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Revising Aggregations - The Count Function","code":"select count(population) from city where population\u003e100000;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Revising Aggregations - The Sum Function","code":"select sum(population) from city where district='California';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Revising Aggregations - Averages","code":"select avg(population) from city where district='California';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Basics of Sets and Relations #1","code":"12345678","score":0.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #1","code":"23456","score":0.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #1","code":"{1,2,3,4,5,6,7,8}","score":0.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #1","code":"8","score":1.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #2","code":"5","score":1.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #3","code":"1","score":1.0,"language":"text"},{"contest":"Master","challenge":"Happy Ladybugs","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the happyLadybugs function below.\ndef happyLadybugs(b):\n    bugs=set(b)\n    result='YES'\n    if '_' in bugs:\n        for i in bugs:\n            if b.count(i)\u003e1 or i=='_':\n                pass\n            else: return 'NO'\n        return result\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g = int(input())\n\n    for g_itr in range(g):\n        n = int(input())\n\n        b = input()\n\n        result = happyLadybugs(b)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.777777777778,"language":"python3"},{"contest":"Master","challenge":"Happy Ladybugs","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the happyLadybugs function below.\ndef happyLadybugs(b):\n    bugs=set(b)\n    if '_' in bugs:\n        for i in bugs:\n            if b.count(i)\u003e1 or i=='_':\n                pass\n            else: return 'NO'\n        return 'YES'\n    else:\n        for i in range(1,len(b)-1):\n            if b[i]==b[i-1] or b[i]==b[i+1]: pass\n            else: return 'NO'\n        return 'YES'\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g = int(input())\n\n    for g_itr in range(g):\n        n = int(input())\n\n        b = input()\n\n        result = happyLadybugs(b)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.555555555556,"language":"python3"},{"contest":"Master","challenge":"Happy Ladybugs","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the happyLadybugs function below.\ndef happyLadybugs(b):\n    bugs=set(b)\n    if '_' in bugs:\n        for i in bugs:\n            if b.count(i)\u003e1 or i=='_':\n                pass\n            else: return 'NO'\n        return 'YES'\n    else:\n        if len(b)\u003e2:\n            for i in range(1,len(b)-1):\n                if b[i]==b[i-1] or b[i]==b[i+1]: pass\n                else: return 'NO'\n            return 'YES'\n        if len(b)==2 and len(bugs)==1: return 'YES'\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g = int(input())\n\n    for g_itr in range(g):\n        n = int(input())\n\n        b = input()\n\n        result = happyLadybugs(b)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.666666666667,"language":"python3"},{"contest":"Master","challenge":"Happy Ladybugs","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the happyLadybugs function below.\ndef happyLadybugs(b):\n    bugs=set(b)\n    if '_' in bugs:\n        for i in bugs:\n            if b.count(i)\u003e1 or i=='_':\n                pass\n            else: return 'NO'\n        return 'YES'\n    else:\n        if len(b)\u003e2:\n            for i in range(1,len(b)-1):\n                if b[i]==b[i-1] or b[i]==b[i+1]: pass\n                else: return 'NO'\n            return 'YES'\n        if len(b)==2 and len(bugs)==1: return 'YES'\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g = int(input())\n\n    for g_itr in range(g):\n        n = int(input())\n\n        b = input()\n\n        result = happyLadybugs(b)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.666666666667,"language":"python3"},{"contest":"Master","challenge":"Happy Ladybugs","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the happyLadybugs function below.\ndef happyLadybugs(b):\n    bugs=set(b)\n    if '_' in bugs:\n        for i in bugs:\n            if b.count(i)\u003e1 or i=='_':\n                pass\n            else: return 'NO'\n        return 'YES'\n    else:\n        if len(b)\u003e2:\n            for i in range(1,len(b)):\n                if i\u003c(len(b)-1):\n                    if b[i]==b[i-1] or b[i]==b[i+1]: pass\n                    else: return 'NO'\n                elif i==(len(b)-1) and b[i]!=b[i-1]: return 'NO'\n            return 'YES'\n        if len(b)==2 and len(bugs)==1: return 'YES'\n    return 'NO'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    g = int(input())\n\n    for g_itr in range(g):\n        n = int(input())\n\n        b = input()\n\n        result = happyLadybugs(b)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Strange Counter","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the strangeCounter function below.\ndef strangeCounter(t):\n    tier=int(math.log((t/3)+1,2))\n    return 3*(2**(tier+1)-1)-t+1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    result = strangeCounter(t)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.9375,"language":"python3"},{"contest":"Master","challenge":"Strange Counter","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the strangeCounter function below.\ndef strangeCounter(t):\n    tier=int(math.log((t/3)+0.99999,2))\n    return 3*(2**(tier+1)-1)-t+1\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    result = strangeCounter(t)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"3D Surface Area","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the surfaceArea function below.\ndef surfaceArea(A):\n    sol=0\n    x = [[0] * (len(A[0]) + 2)]\n    for i in A:\n        x.append([0] + i + [0])\n    x.append([0] * (len(A[0]) + 2))\n\n    for i in range(len(x)):\n        for j in range(len(x[0])):\n            if x[i][j]: sol+=2\n    print(x)\n    for i in range(1, len(x)-1):\n        for j in range(1, len(x[i])-1):\n            sol+=max(0,x[i][j]-x[i][j+1])\n            sol+=max(0,x[i][j]-x[i][j-1])\n            sol+=max(0,x[i][j]-x[i+1][j])\n            sol+=max(0,x[i][j]-x[i-1][j])\n    return sol\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    HW = input().split()\n\n    H = int(HW[0])\n\n    W = int(HW[1])\n\n    A = []\n\n    for _ in range(H):\n        A.append(list(map(int, input().rstrip().split())))\n\n    result = surfaceArea(A)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Big Sorting","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bigSorting function below.\ndef bigSorting(unsorted):\n    return map(str,sorted(unsorted))\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    unsorted = []\n\n    for _ in range(n):\n        unsorted_item = input()\n        unsorted.append(int(unsorted_item))\n\n    result = bigSorting(unsorted)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.52,"language":"python3"},{"contest":"Master","challenge":"Big Sorting","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bigSorting function below.\ndef bigSorting(unsorted):\n    return sorted(unsorted,key=len)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    unsorted = []\n\n    for _ in range(n):\n        unsorted_item = input()\n        unsorted.append(unsorted_item)\n\n    result = bigSorting(unsorted)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Big Sorting","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bigSorting function below.\ndef bigSorting(unsorted):\n    return sorted(unsorted,key=len)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    unsorted = []\n\n    for _ in range(n):\n        unsorted_item = input()\n        unsorted.append(str(int(unsorted_item)))\n\n    result = bigSorting(unsorted)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Big Sorting","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bigSorting function below.\ndef bigSorting(unsorted):\n    return sorted(unsorted,key=int)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    unsorted = []\n\n    for _ in range(n):\n        unsorted_item = input()\n        unsorted.append(str(int(unsorted_item)))\n\n    result = bigSorting(unsorted)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.36,"language":"python3"},{"contest":"Master","challenge":"Big Sorting","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bigSorting function below.\ndef bigSorting(unsorted):\n    return sorted(unsorted,key=int)\n\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    n = int(input())\n\n    unsorted = []\n\n    for _ in range(n):\n        unsorted_item = input()\n        unsorted.append(unsorted_item)\n\n    result=bigSorting(unsorted)\n\n    fptr.write('\\n'.join(result))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Intro to Tutorial Challenges","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the introTutorial function below.\ndef introTutorial(V, arr):\n    return sorted(arr).index(V)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    V = int(input())\n\n    n = int(input())\n\n    arr = list(map(int, input().rstrip().split()))\n\n    result = introTutorial(V, arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"2D Array - DS","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the hourglassSum function below.\ndef hourglassSum(arr):\n    for i in range(4):\n        for j in range(4):\n            if not i and not j:\n                maxsum=arr[i][j]+arr[i][j+1]+arr[i][j+2]+arr[i+1][j+1]+arr[i+2][j]+arr[i+2][j+1]+arr[i+2][j+2]\n            else:\n                maxsum=max(maxsum,arr[i][j]+arr[i][j+1]+arr[i][j+2]+arr[i+1][j+1]+arr[i+2][j]+arr[i+2][j+1]+arr[i+2][j+2])\n    return maxsum\n            \n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    arr = []\n\n    for _ in range(6):\n        arr.append(list(map(int, input().rstrip().split())))\n\n    result = hourglassSum(arr)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Array Manipulation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the arrayManipulation function below.\ndef arrayManipulation(n, queries):\n    res=[0]*n\n    for i in queries:  \n        for j in range(i[0]-1,i[1]):\n            res[j]+=i[2]\n    return max(res)\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    queries = []\n\n    for _ in range(m):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = arrayManipulation(n, queries)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.3,"language":"python3"},{"contest":"Master","challenge":"Array Manipulation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the arrayManipulation function below.\ndef arrayManipulation(n, queries):\n    maxres=0\n    sol=0\n    res=[0]*(n+1)\n    for i in queries:  \n        res[i[0]-1]+=i[2]\n        res[i[1]]-=i[2]\n    for i in res:\n        sol+=i\n        if sol\u003emaxres: maxres=sol\n    return maxres\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    queries = []\n\n    for _ in range(m):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = arrayManipulation(n, queries)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Left Rotation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\ndef rotate(a, d):\n    return a[d:] + a[:d]\n\nif __name__ == '__main__':\n    nd = input().split()\n\n    n = int(nd[0])\n\n    d = int(nd[1])\n\n    a = list(map(int, input().rstrip().split()))\n    print(' '.join((map(str,rotate(a,d)))))\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Pangrams","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the pangrams function below.\ndef pangrams(s):\n    if set(s.lower())==set('abcdefghijklmnopqrstuvwxyz ') or set(s.lower())==set('abcdefghijklmnopqrstuvwxyz'):\n        return 'pangram'\n    else: return 'not pangram'\n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n\n    result = pangrams(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Absolute Permutation","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the absolutePermutation function below.\ndef absolutePermutation(n, k):\n    sol=[]\n    if not k: return range(1,n+1)\n    if n%(2*k): return [-1]\n    for i in range(1,n+1):\n        sol.append(i+k)\n        if i%k==0: k=-k\n    return sol\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        nk = input().split()\n\n        n = int(nk[0])\n\n        k = int(nk[1])\n\n        result = absolutePermutation(n, k)\n\n        fptr.write(' '.join(map(str, result)))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"The Bomberman Game","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bomberMan function below.\ndef bombing(t):\n    if t\u003c3: return t+1\n    return 4\n        \ndef mapper(x):\n    return -1 if x=='.' else 1\ndef revmapper(x):\n    return '.' if x==-1 else 'O'\ndef bomberMan(n, grid):\n    \n    grid=[list(map(mapper,x)) for x in grid]\n    for i in range(2,n+1):\n        grid=[list(map(bombing,x)) for x in grid]\n        for j in range(r):\n            for k in range(c):\n                if grid[j][k]==3:\n                    try:\n                        if grid[j][k-1]!=3 and k\u003e0:\n                            grid[j][k-1]=-1\n                    except: pass\n                    try:\n                        if grid[j][k+1]!=3:\n                            grid[j][k+1]=-1\n                    except: pass\n                    try:\n                        if grid[j-1][k]!=3 and j\u003e0:\n                            grid[j-1][k]=-1\n                    except: pass\n                    try:\n                        if grid[j+1][k]!=3:\n                            grid[j+1][k]=-1\n                    except: pass\n                    try:\n                        grid[j][k]=-1\n                    except: pass\n    grid=[list(map(revmapper,x))for x in grid]\n    return grid\n                \n                    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    rcn = input().split()\n\n    r = int(rcn[0])\n\n    c = int(rcn[1])\n\n    n = int(rcn[2])\n\n    grid = []\n\n    for _ in range(r):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = bomberMan(n, grid)\n    for j in range(len(result)):\n        fptr.write(''.join(result[j]))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.4,"language":"python3"},{"contest":"Master","challenge":"The Bomberman Game","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bomberMan function below.\ndef bombing(t):\n    if t\u003c3: return t+1\n    return 4\n        \ndef mapper(x):\n    return -1 if x=='.' else 1\ndef revmapper(x):\n    return '.' if x==-1 else 'O'\ndef bomberMan(n, grid):\n    \n    grid=[list(map(mapper,x)) for x in grid]\n    for i in range(2,n+1):\n        grid=[list(map(bombing,x)) for x in grid]\n        for j in range(r):\n            for k in range(c):\n                if grid[j][k]==3:\n                    try:\n                        if grid[j][k-1]!=3 and k\u003e0:\n                            grid[j][k-1]=-1\n                    except: pass\n                    try:\n                        if grid[j][k+1]!=3:\n                            grid[j][k+1]=-1\n                    except: pass\n                    try:\n                        if grid[j-1][k]!=3 and j\u003e0:\n                            grid[j-1][k]=-1\n                    except: pass\n                    try:\n                        if grid[j+1][k]!=3:\n                            grid[j+1][k]=-1\n                    except: pass\n                    try:\n                        grid[j][k]=-1\n                    except: pass\n    grid=[list(map(revmapper,x))for x in grid]\n    return grid\n                \n                    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    rcn = input().split()\n\n    r = int(rcn[0])\n\n    c = int(rcn[1])\n\n    n = int(rcn[2])\n\n    grid = []\n\n    for _ in range(r):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = bomberMan(n, grid)\n    for j in range(len(result)):\n        fptr.write(''.join(result[j]))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.4,"language":"python3"},{"contest":"Master","challenge":"The Bomberman Game","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bomberMan function below.\ndef bombing(t):\n    if t\u003c3: return t+1\n    return 4\n        \ndef mapper(x):\n    return -1 if x=='.' else 1\ndef revmapper(x):\n    return '.' if x==-1 else 'O'\ndef bomberMan(n, grid):\n    \n    grid=[list(map(mapper,x)) for x in grid]\n    for i in range(2,(n+2)%4+3):\n        grid=[list(map(bombing,x)) for x in grid]\n        for j in range(r):\n            for k in range(c):\n                if grid[j][k]==3:\n                    try:\n                        if grid[j][k-1]!=3 and k\u003e0:\n                            grid[j][k-1]=-1\n                    except: pass\n                    try:\n                        if grid[j][k+1]!=3:\n                            grid[j][k+1]=-1\n                    except: pass\n                    try:\n                        if grid[j-1][k]!=3 and j\u003e0:\n                            grid[j-1][k]=-1\n                    except: pass\n                    try:\n                        if grid[j+1][k]!=3:\n                            grid[j+1][k]=-1\n                    except: pass\n                    try:\n                        grid[j][k]=-1\n                    except: pass\n        grid2=[list(map(revmapper,x))for x in grid]\n        for a in range(len(grid2)):\n            print(''.join(grid2[a]))\n            print(i)\n    grid=[list(map(revmapper,x))for x in grid]\n    return grid\n                \n                    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    rcn = input().split()\n\n    r = int(rcn[0])\n\n    c = int(rcn[1])\n\n    n = int(rcn[2])\n\n    grid = []\n\n    for _ in range(r):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = bomberMan(n, grid)\n    for j in range(len(result)):\n        fptr.write(''.join(result[j]))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":0.966666666667,"language":"python3"},{"contest":"Master","challenge":"The Bomberman Game","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the bomberMan function below.\ndef bombing(t):\n    if t\u003c3: return t+1\n    return 4\n        \ndef mapper(x):\n    return -1 if x=='.' else 1\ndef revmapper(x):\n    return '.' if x==-1 else 'O'\ndef bomberMan(n, grid):\n    if n==1: return grid\n    grid=[list(map(mapper,x)) for x in grid]\n    for i in range(2,(n+2)%4+3):\n        grid=[list(map(bombing,x)) for x in grid]\n        for j in range(r):\n            for k in range(c):\n                if grid[j][k]==3:\n                    try:\n                        if grid[j][k-1]!=3 and k\u003e0:\n                            grid[j][k-1]=-1\n                    except: pass\n                    try:\n                        if grid[j][k+1]!=3:\n                            grid[j][k+1]=-1\n                    except: pass\n                    try:\n                        if grid[j-1][k]!=3 and j\u003e0:\n                            grid[j-1][k]=-1\n                    except: pass\n                    try:\n                        if grid[j+1][k]!=3:\n                            grid[j+1][k]=-1\n                    except: pass\n                    try:\n                        grid[j][k]=-1\n                    except: pass\n        grid2=[list(map(revmapper,x))for x in grid]\n        for a in range(len(grid2)):\n            print(''.join(grid2[a]))\n            print(i)\n    grid=[list(map(revmapper,x))for x in grid]\n    return grid\n                \n                    \n    \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    rcn = input().split()\n\n    r = int(rcn[0])\n\n    c = int(rcn[1])\n\n    n = int(rcn[2])\n\n    grid = []\n\n    for _ in range(r):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = bomberMan(n, grid)\n    for j in range(len(result)):\n        fptr.write(''.join(result[j]))\n        fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[i+r][i+c]==arr[r+i][c-i]==arr[r-i][c-i]==arr[r-i][i+c]=='G':\n            if i:\n                size+=4\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.142857142857,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r-i][c]=='G':\n            if i:\n                size+=4\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.095238095238,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r-i][c]=='G':\n            if i:\n                size+=4\n                arr[r][i+c]=arr[r][c-i]=arr[r-i][c]=arr[r-i][c]=arr[r][c]='B'\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.047619047619,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r-i][c]=='G':\n            if i:\n                size+=4\n                arr[r][i+c].lower\n                arr[r][c-i].lower\n                arr[r-i][c].lower\n                arr[r-i][c].lower\n                arr[r][c].lower\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.095238095238,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    arr[r]=arr[r][:c]+'B'+arr[r][(c+1):]\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r-i][c]=='G':\n            if i:\n                size+=4\n                arr[r]=arr[r][:(c+i)]+'B'+arr[r][(c+i+1):]\n                arr[r]=arr[r][:(c-i)]+'B'+arr[r][(c-i+1):]\n                arr[r-i]=arr[r-i][:c]+'B'+arr[r-i][(c+1):]\n                arr[r+i]=arr[r+i][:c]+'B'+arr[r+i][(c+1):]\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.047619047619,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    #arr[r]=arr[r][:c]+'B'+arr[r][(c+1):]\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n                #arr[r]=arr[r][:(c+i)]+'B'+arr[r][(c+i+1):]\n                #arr[r]=arr[r][:(c-i)]+'B'+arr[r][(c-i+1):]\n                #arr[r-i]=arr[r-i][:c]+'B'+arr[r-i][(c+1):]\n               # arr[r+i]=arr[r+i][:c]+'B'+arr[r+i][(c+1):]\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.095238095238,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n                arr[r]=arr[r][:(c+i)]+'B'+arr[r][(c+i+1):]\n                arr[r]=arr[r][:(c-i)]+'B'+arr[r][(c-i+1):]\n                arr[r-i]=arr[r-i][:c]+'B'+arr[r-i][(c+1):]\n                arr[r+i]=arr[r+i][:c]+'B'+arr[r+i][(c+1):]\n\n        else: break\n    #arr[r]=arr[r][:c]+'B'+arr[r][(c+1):]\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.333333333333,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.095238095238,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=(0,0)\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                print(i,j)\n                temp=checksize(grid,i,j)\n                print(temp)\n                if temp\u003epluses[0]:\n                    pluses=(temp,pluses[0])\n                elif temp\u003epluses[1]:\n                    pluses=(pluses[0],temp)\n                else: pass\n    return pluses[0]*pluses[1]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.095238095238,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[[0,0,0],[0,0,0]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                print(temp,i,j)\n                print(pluses[0],pluses[1])\n                if temp\u003epluses[0][0] and abs(i-pluses[0][1])+abs(j-pluses[0][2])\u003e(temp//4+pluses[0][0]//4):\n                    pluses[1]=pluses[0]\n                    pluses[0]=[temp,i,j]\n                elif temp\u003epluses[1][0] and abs(i-pluses[0][1])+abs(j-pluses[0][2])\u003e(temp//4+pluses[0][0]//4):\n                    pluses[1]=[temp,i,j]\n                else: pass\n    return pluses[0][0]*pluses[1][0]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.428571428571,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[[0,0,0],[0,0,0]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                print(temp,i,j)\n                print(pluses[0],pluses[1])\n                if temp\u003epluses[0][0]: #and abs(i-pluses[0][1])+abs(j-pluses[0][2])\u003e(temp//4+pluses[0][0]//4):\n                    #pluses[1]=pluses[0]\n                    pluses[0]=[temp,i,j]\n                elif temp\u003epluses[1][0] and abs(i-pluses[0][1])+abs(j-pluses[0][2])\u003e(temp//4+pluses[0][0]//4):\n                    pluses[1]=[temp,i,j]\n                else: pass\n    return pluses[0][0]*pluses[1][0]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.571428571429,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[[0,0,0],[0,0,0]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                print(temp,i,j)\n                print(pluses[0],pluses[1])\n                if temp\u003epluses[0][0]: #and abs(i-pluses[0][1])+abs(j-pluses[0][2])\u003e(temp//4+pluses[0][0]//4):\n                    #pluses[1]=pluses[0]\n                    pluses[0]=[temp,i,j]\n                elif temp\u003epluses[1][0] and abs(i-pluses[0][1])+abs(j-pluses[0][2])\u003e(temp//4+pluses[0][0]//4):\n                    pluses[1]=[temp,i,j]\n                else: pass\n    return pluses[0][0]*pluses[1][0]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.571428571429,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[[0,0,0],[0,0,0]]\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                print(temp,i,j)\n                print(pluses[0],pluses[1])\n                if temp\u003epluses[0][0]: #and abs(i-pluses[0][1])+abs(j-pluses[0][2])\u003e(temp//4+pluses[0][0]//4):\n                    #pluses[1]=pluses[0]\n                    pluses[0]=[temp,i,j]\n                elif temp\u003epluses[1][0] and abs(i-pluses[0][1])+abs(j-pluses[0][2])\u003e(temp//4+pluses[0][0]//4):\n                    pluses[1]=[temp,i,j]\n                else: pass\n    return pluses[0][0]*pluses[1][0]\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.571428571429,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[]\n    result=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                pluses.append([temp,i,j])\n    print(pluses)\n    print(len(pluses))\n    for k in range(len(pluses)):\n        for l in range(k+1,len(pluses)):\n            if pluses[k][0]*pluses[l][0]\u003eresult:\n                if abs(pluses[k][1]-pluses[l][1])+abs(pluses[k][2]-pluses[l][2])\u003epluses[k][0]//4+pluses[l][0]//4:\n                    result=pluses[k][0]*pluses[l][0]\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.666666666667,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[]\n    result=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                pluses.append([temp,i,j])\n    print(pluses)\n    print(len(pluses))\n    for k in range(len(pluses)):\n        for l in range(k+1,len(pluses)):\n            if pluses[k][0]*pluses[l][0]\u003eresult:\n                if abs(pluses[k][1]-pluses[l][1])+abs(pluses[k][2]-pluses[l][2])\u003epluses[k][0]//4+pluses[l][0]//4:\n                    result=pluses[k][0]*pluses[l][0]\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.666666666667,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checkcommon(arr1,arr2):\n    set1=[(arr1[1],arr1[2])]\n    for i in range(arr1[0]//4):\n        set1.append((arr1[1],arr1[2]+i))\n        set1.append((arr1[1],arr1[2]-i))\n        set1.append((arr1[1]-i,arr1[2]))\n        set1.append((arr1[1]+i,arr1[2]))\n    for i in range(arr2[0]//4):\n        if (arr2[1],arr2[2]) in set1: return False\n        if (arr2[1]+i,arr2[2]) in set1: return False\n        if (arr2[1]-i,arr2[2]) in set1: return False\n        if (arr2[1],arr2[2]+i) in set1: return False\n        if (arr2[1],arr2[2]-i) in set1: return False\n    return True\n        \ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[]\n    result=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                pluses.append([temp,i,j])\n    print(pluses)\n    print(len(pluses))\n    for k in range(len(pluses)):\n        for l in range(k+1,len(pluses)):\n            if pluses[k][0]*pluses[l][0]\u003eresult:\n                if checkcommon(pluses[k],pluses[l]):\n                    result=pluses[k][0]*pluses[l][0]\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.238095238095,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checkcommon(arr1,arr2):\n    set1=[(arr1[1],arr1[2])]\n    for i in range(1,arr1[0]//4+1):\n        set1.append((arr1[1],arr1[2]+i))\n        set1.append((arr1[1],arr1[2]-i))\n        set1.append((arr1[1]-i,arr1[2]))\n        set1.append((arr1[1]+i,arr1[2]))\n    print(set1)\n    for i in range(1,arr2[0]//4+1):\n        if (arr2[1],arr2[2]) in set1: return False\n        if (arr2[1]+i,arr2[2]) in set1: return False\n        if (arr2[1]-i,arr2[2]) in set1: return False\n        if (arr2[1],arr2[2]+i) in set1: return False\n        if (arr2[1],arr2[2]-i) in set1: return False\n    return True\n        \ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[]\n    result=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                pluses.append([temp,i,j])\n    print(pluses)\n    print(len(pluses))\n    for k in range(len(pluses)):\n        for l in range(k+1,len(pluses)):\n            if pluses[k][0]*pluses[l][0]\u003eresult:\n                if checkcommon(pluses[k],pluses[l]):\n                    result=pluses[k][0]*pluses[l][0]\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.857142857143,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checkcommon(arr1,arr2):\n    set1=[(arr1[1],arr1[2])]\n    for i in range(1,(arr1[0]//4)+1):\n        set1.append((arr1[1],arr1[2]+i))\n        set1.append((arr1[1],arr1[2]-i))\n        set1.append((arr1[1]-i,arr1[2]))\n        set1.append((arr1[1]+i,arr1[2]))\n    print(set1)\n    for i in range(1,(arr2[0]//4)+1):\n        if (arr2[1],arr2[2]) in set1: return False\n        if (arr2[1]+i,arr2[2]) in set1: return False\n        if (arr2[1]-i,arr2[2]) in set1: return False\n        if (arr2[1],arr2[2]+i) in set1: return False\n        if (arr2[1],arr2[2]-i) in set1: return False\n    return True\n        \ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[]\n    result=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                pluses.append([temp,i,j])\n    print(pluses)\n    print(len(pluses))\n    for k in range(len(pluses)):\n        for l in range(k+1,len(pluses)):\n            if pluses[k][0]*pluses[l][0]\u003eresult:\n                if checkcommon(pluses[k],pluses[l]):\n                    result=pluses[k][0]*pluses[l][0]\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":0.857142857143,"language":"python3"},{"contest":"Master","challenge":"Ema's Supercomputer","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the twoPluses function below.\ndef checkcommon(arr1,arr2,a,b):\n    set1=[(arr1[1],arr1[2])]\n    for i in range(1,((arr1[0]-4*a)//4)+1):\n        set1.append((arr1[1],arr1[2]+i))\n        set1.append((arr1[1],arr1[2]-i))\n        set1.append((arr1[1]-i,arr1[2]))\n        set1.append((arr1[1]+i,arr1[2]))\n    print(set1)\n    for i in range(1,((arr2[0]-4*b)//4)+1):\n        if (arr2[1],arr2[2]) in set1: return False\n        if (arr2[1]+i,arr2[2]) in set1: return False\n        if (arr2[1]-i,arr2[2]) in set1: return False\n        if (arr2[1],arr2[2]+i) in set1: return False\n        if (arr2[1],arr2[2]-i) in set1: return False\n    return True\n        \ndef checksize(arr,r,c):\n    size=1\n    for i in range(1,min(r,n-r-1,c,m-c-1)+1):\n        if arr[r][i+c]==arr[r][c-i]==arr[r-i][c]==arr[r+i][c]=='G':\n            if i:\n                size+=4\n\n        else: break\n    return size\ndef twoPluses(grid):\n    pluses=[]\n    result=0\n    for i in range(n):\n        for j in range(m):\n            if grid[i][j]=='G':\n                temp=checksize(grid,i,j)\n                pluses.append([temp,i,j])\n    print(pluses)\n    print(len(pluses))\n    for k in range(len(pluses)):\n        for l in range(k+1,len(pluses)):\n            for i in range(pluses[k][0]//4+1):\n                for j in range(pluses[l][0]//4+1):\n                    if (pluses[k][0]-4*i)*(pluses[l][0]-4*j)\u003eresult:\n                        if checkcommon(pluses[k],pluses[l],i,j):\n                            result=(pluses[k][0]-4*i)*(pluses[l][0]-4*j)\n    return result\n\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    nm = input().split()\n\n    n = int(nm[0])\n\n    m = int(nm[1])\n\n    grid = []\n\n    for _ in range(n):\n        grid_item = input()\n        grid.append(grid_item)\n\n    result = twoPluses(grid)\n\n    fptr.write(str(result) + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Larry's Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the larrysArray function below.\ndef larrysArray(A):\n    res=0\n    for i in range(len(A)):\n        for j in range(i+1,len(A)):\n            if A[j]\u003cA[i]: res+=1\n    return 'NO' if res%2 else 'YES' \nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    t = int(input())\n\n    for t_itr in range(t):\n        n = int(input())\n\n        A = list(map(int, input().rstrip().split()))\n\n        result = larrysArray(A)\n\n        fptr.write(result + '\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Basics of Sets and Relations #4","code":"5\n\n","score":0.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #4","code":"42\n\n","score":1.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #5","code":"2\n\n","score":1.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #6","code":"9\n\n","score":0.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #6","code":"6\n\n","score":0.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #6","code":"2\n","score":1.0,"language":"text"},{"contest":"Master","challenge":"Basics of Sets and Relations #7","code":"2\n\n","score":1.0,"language":"text"},{"contest":"Master","challenge":"Occupations","code":"select min(doctor), min(prof), min(singer), min(actor) from \n ( select RANK() OVER (PARTITION BY Occupation ORDER BY Name) as Rank, case when Occupation='Doctor' then Name else null end as doctor, case when Occupation='Professor' then Name else null end as prof, case when Occupation='Singer' then Name else null end as singer, case when Occupation='Actor' then Name else null end as actor from Occupations)\n group by Rank\n order by min(doctor), min(prof), min(singer), min(actor);","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Binary Tree Nodes","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect n, case when p is null then 'Root'\nwhen n in (select p from BST) then 'Inner'\nelse 'Leaf' end from BST order by 1;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"New Companies","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect distinct(c.company_code),\n        c.founder,\n        (select  count(distinct(lead_manager_code)) from lead_manager where company_code=c.company_code),\n        (select  count(distinct(senior_manager_code)) from senior_manager where company_code=c.company_code),\n        (select  count(distinct(manager_code)) from manager where company_code=c.company_code),\n        (select  count(distinct(employee_code)) from employee where company_code=c.company_code) from company c left join lead_manager lm on (c.company_code=lm.company_code) left join senior_manager s on (s.company_code=c.company_code) left join manager m on (m.company_code=c.company_code) left join employee e on (e.company_code=c.company_code) order by c.company_code;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Average Population","code":"select floor(avg(population)) from city","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Japan Population","code":"select sum(population) from city where countrycode='JPN';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Population Density Difference","code":"select max(population)-min(population) from city","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"The Blunder","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect replace(to_char(salary),'0','') from employees\n","score":0.0,"language":"oracle"},{"contest":"Master","challenge":"The Blunder","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect ceil(avg(salary)-avg(to_number(replace(to_char(salary),'0',''),'9999' ))) from employees;\n","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Top Earners","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect (select to_char(max(months*salary)) from employee)||' '||(select count(*) from employee where salary*months=(select max(months*salary) from employee)) from dual;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 2","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect round(sum(lat_n),2), round(sum(long_w),2) from station","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 13","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect trunc(sum(lat_n),4) from station where lat_n \u003e=38.7880 and lat_n \u003c= 137.2345;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 14","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect trunc( max(lat_n),4) from station where lat_n \u003c= 137.2345;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 15","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect round(long_w,4) from station where lat_n=(select (max(lat_n)) from station where lat_n \u003c= 137.2345);","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 16","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect round(min(lat_n),4) from station where lat_n \u003e 38.7780;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 17","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect round(long_w,4) from station where lat_n = (select min(lat_n) from station where lat_n \u003e 38.7780);","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 18","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect round(abs(max(lat_n)-min(lat_n)) + abs(max(long_w)-min(long_w)),4) from station","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 19","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect round(sqrt(power((max(lat_n)-min(lat_n)),2) + power((max(long_w)-min(long_w)),2)),4) from station","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Weather Observation Station 20","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect round(median(lat_n),4) from station","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Asian Population","code":"select sum(c.population) from city c left join country co on (c.countrycode=co.code) where co.continent='Asia';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"African Cities","code":"select c.name from city c left join country co on (c.countrycode=co.code) where co.continent='Africa';","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Average Population of Each Continent","code":"select co.continent, round(avg(c.population)-0.5) from city c left join country co on (c.countrycode=co.code) group by co.continent having co.continent is not null;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Super Reduced String","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the superReducedString function below.\ndef superReducedString(s):\n    res=''\n    for i in s:\n        if s.count(i) % 2 != 0 and i not in res:\n            res+=i\n    return res if len(res)\u003e0 else 'Empty String'\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    s = input()\n    result = superReducedString(s)\n\n    fptr.write(result + '\\n')\n\n    fptr.close()\n","score":0.615384615385,"language":"python3"},{"contest":"Master","challenge":"The Report","code":"/*\nEnter your query here.\nPlease append a semicolon \";\" at the end of the query and enter your query in a single line to avoid error.\n*/\n\nselect decode(g.grade, 10,s.name, 9,s.name, 8,s.name) name, g.grade, s.marks from students s, grades g where s.marks between g.min_mark and g.max_mark order by g.grade desc, s.name asc;","score":1.0,"language":"oracle"},{"contest":"Master","challenge":"Sparse Arrays","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n# Complete the matchingStrings function below.\ndef matchingStrings(strings, queries):\n    result = []\n    for i in queries:\n        result.append(strings.count(i))\n    return result\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    strings_count = int(input())\n\n    strings = []\n\n    for _ in range(strings_count):\n        strings_item = input()\n        strings.append(strings_item)\n\n    queries_count = int(input())\n\n    queries = []\n\n    for _ in range(queries_count):\n        queries_item = input()\n        queries.append(queries_item)\n\n    res = matchingStrings(strings, queries)\n\n    fptr.write('\\n'.join(map(str, res)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Dynamic Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'dynamicArray' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY queries\n#\n\ndef dynamicArray(n, queries):\n    # Write your code here\n    idx=0\n    la=0\n    seq=[]\n    sol=[]\n    x=0\n    for _ in range (n):\n        seq.append([])\n    \n    for q in queries:\n        if q[0]==1:\n            seq[(q[1]^la) % 2].append(q[2])\n        #else:\n            #sol.append(seq[(q[1]^la) % 2])\n            x=(q[1]^la) % 2\n            la=x\n           #la=seq[x]\n    return seq[x]\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = dynamicArray(n, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Dynamic Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'dynamicArray' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY queries\n#\n\ndef dynamicArray(n, queries):\n    # Write your code here\n    idx=0\n    la=0\n    seq=[]\n    sol=[]\n    x=0\n    for _ in range (n):\n        seq.append([])\n    \n    for q in queries:\n        if q[0]==1:\n            seq[(q[1]^la) % 2].append(q[2])\n        #else:\n            #sol.append(seq[(q[1]^la) % 2])\n            x=(q[1]^la) % 2\n            la=x\n            seq.append(q[2])\n    return seq[x]\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = dynamicArray(n, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Dynamic Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'dynamicArray' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY queries\n#\n\ndef dynamicArray(n, queries):\n    # Write your code here\n    idx=0\n    la=0\n    seq=[]\n    sol=[]\n    x=0\n    for _ in range (n):\n        seq.append([])\n    \n    for q in queries:\n        if q[0]==1:\n            seq[(q[1]^la) % 2].append(q[2])\n        else:\n            #sol.append(seq[(q[1]^la) % 2])\n            x=(q[1]^la) % 2\n            la=seq[x][q[2]]\n            sol.append(la)\n\n    return sol\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = dynamicArray(n, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Dynamic Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'dynamicArray' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY queries\n#\n\ndef dynamicArray(n, queries):\n    # Write your code here\n    idx=0\n    la=0\n    seq=[]\n    sol=[]\n    x=0\n    for _ in range (n):\n        seq.append([])\n    \n    for q in queries:\n        if q[0]==1:\n            seq[(q[1]^la) % 2].append(q[2])\n        else:\n            #sol.append(seq[(q[1]^la) % 2])\n            x=(q[1]^la) % 2\n            la=seq[x][q[2]%n]\n            sol.append(la)\n\n    return sol\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = dynamicArray(n, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Dynamic Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'dynamicArray' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY queries\n#\n\ndef dynamicArray(n, queries):\n    # Write your code here\n    idx=0\n    la=0\n    seq=[]\n    sol=[]\n    x=0\n    for _ in range (n):\n        seq.append([])\n    \n    for q in queries:\n        if q[0]==1:\n            seq[(q[1]^la) % n].append(q[2])\n        else:\n            #sol.append(seq[(q[1]^la) % 2])\n            x=(q[1]^la) % n\n            la=seq[x][q[2]%n]\n            sol.append(la)\n\n    return sol\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = dynamicArray(n, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Dynamic Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'dynamicArray' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY queries\n#\n\ndef dynamicArray(n, queries):\n    # Write your code here\n    idx=0\n    la=0\n    seq=[]\n    sol=[]\n    x=0\n    for _ in range (n):\n        seq.append([])\n    \n    for q in queries:\n        if q[0]==1:\n            seq[(q[1]^la) % n].append(q[2])\n        else:\n            #sol.append(seq[(q[1]^la) % 2])\n            x=(q[1]^la) % n\n            la=seq[x][q[2]]\n            sol.append(la)\n\n    return sol\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = dynamicArray(n, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Dynamic Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'dynamicArray' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY queries\n#\n\ndef dynamicArray(n, queries):\n    # Write your code here\n    idx=0\n    la=0\n    seq=[]\n    sol=[]\n    x=0\n    for _ in range (n):\n        seq.append([])\n    \n    for q in queries:\n        if q[0]==1:\n            seq[(q[1]^la) % n].append(q[2])\n        else:\n            #sol.append(seq[(q[1]^la) % 2])\n            x=(q[1]^la) % n\n            la=seq[x][q[2]%len(seq)]\n            sol.append(la)\n\n    return sol\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = dynamicArray(n, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Dynamic Array","code":"#!/bin/python3\n\nimport math\nimport os\nimport random\nimport re\nimport sys\n\n#\n# Complete the 'dynamicArray' function below.\n#\n# The function is expected to return an INTEGER_ARRAY.\n# The function accepts following parameters:\n#  1. INTEGER n\n#  2. 2D_INTEGER_ARRAY queries\n#\n\ndef dynamicArray(n, queries):\n    # Write your code here\n    idx=0\n    la=0\n    seq=[]\n    sol=[]\n    x=0\n    for _ in range (n):\n        seq.append([])\n    \n    for q in queries:\n        if q[0]==1:\n            seq[(q[1]^la) % n].append(q[2])\n        else:\n            #sol.append(seq[(q[1]^la) % 2])\n            x=(q[1]^la) % n\n            la=seq[x][q[2]%len(seq[x])]\n            sol.append(la)\n\n    return sol\nif __name__ == '__main__':\n    fptr = open(os.environ['OUTPUT_PATH'], 'w')\n\n    first_multiple_input = input().rstrip().split()\n\n    n = int(first_multiple_input[0])\n\n    q = int(first_multiple_input[1])\n\n    queries = []\n\n    for _ in range(q):\n        queries.append(list(map(int, input().rstrip().split())))\n\n    result = dynamicArray(n, queries)\n\n    fptr.write('\\n'.join(map(str, result)))\n    fptr.write('\\n')\n\n    fptr.close()\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Print the Elements of a Linked List","code":"\n\n# Complete the printLinkedList function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\n\ndef printLinkedList(head):\n    while head:\n        print(head.data)\n        head=head.next\n    \n\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Insert a Node at the Tail of a Linked List","code":"\n\n# Complete the insertNodeAtTail function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef insertNodeAtTail(head, data):\n    if head == None:\n        return SinglyLinkedListNode(data)\n    curr_node = head\n    while curr_node.next != None:\n        curr_node = curr_node.next\n    curr_node.next = SinglyLinkedListNode(None)\n    return head\n    \n","score":0.0,"language":"python3"},{"contest":"Master","challenge":"Insert a Node at the Tail of a Linked List","code":"\n\n# Complete the insertNodeAtTail function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef insertNodeAtTail(head, data):\n    if head == None:\n        return SinglyLinkedListNode(data)\n    curr_node = head\n    while curr_node.next != None:\n        curr_node = curr_node.next\n    curr_node.next = SinglyLinkedListNode(data)\n    return head\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Insert a node at the head of a linked list","code":"\n\n# Complete the insertNodeAtHead function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef insertNodeAtHead(llist, data):\n    new_node=SinglyLinkedListNode(data)\n    if llist==None:\n        llist = new_node\n    else:\n        new_node.next,llist = llist, new_node\n    print(new_node.next)\n    return llist\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Insert a node at a specific position in a linked list","code":"\n\n# Complete the insertNodeAtPosition function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef insertNodeAtPosition(head, data, position):\n    new_node = SinglyLinkedListNode(data)\n    cur=head\n    print(new_node.data)\n\n    for _ in  range(position-1):\n        cur=cur.next\n        cur_next=cur.next\n    cur.next,new_node.next=new_node, cur_next\n    return head\n    \n    n = head\n    for _ in range(position - 1):\n        n = n.next\n        n_next = n.next\n    n.next = SinglyLinkedListNode(data)\n    n.next.next = n_next\n    return head\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Insert a node at a specific position in a linked list","code":"\n\n# Complete the insertNodeAtPosition function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef insertNodeAtPosition(head, data, position):\n    new_node = SinglyLinkedListNode(data)\n    cur=head\n    print(new_node.data)\n\n    for _ in  range(position-1):\n        cur=cur.next\n        cur_next=cur.next\n    cur.next,new_node.next=new_node, cur_next\n    return head\n    \n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Delete a Node","code":"\n\n# Complete the deleteNode function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef deleteNode(head, position):\n    if position==0:\n        return head.next\n    temp=head\n    for _ in range(position-1):\n        temp=temp.next\n        next_temp=temp.next\n\n    temp.next=temp.next.next\n    return head\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Print in Reverse","code":"\n\n# Complete the reversePrint function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef reversePrint(head):\n    rev=[]\n    while head:\n        rev.append(head.data)\n        head=head.next\n    for i in range (len(rev)-1,-1,-1):\n        print(rev[i])\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Reverse a linked list","code":"\n\n# Complete the reverse function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef reverse(head):\n    prev = None\n    temp = head\n    while temp:\n        nextnode=temp.next\n        temp.next=prev\n        prev=temp\n        temp=nextnode\n    print(prev.data)\n    return prev\n\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Compare two linked lists","code":"\n\n# Complete the compare_lists function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef compare_lists(llist1, llist2):\n    while llist1 or llist2:\n        if  not (llist1 and llist2) or llist1.data != llist2.data:\n            return 0        \n        llist1 = llist1.next\n        llist2 = llist2.next\n    return 1\n","score":1.0,"language":"python3"},{"contest":"Master","challenge":"Merge two sorted linked lists","code":"\n\n# Complete the mergeLists function below.\n\n#\n# For your reference:\n#\n# SinglyLinkedListNode:\n#     int data\n#     SinglyLinkedListNode next\n#\n#\ndef mergeLists(head1, head2):\n\n    s = SinglyLinkedList()\n    c = s\n    while head1 and head2:\n        if head1.data \u003e head2.data:\n            s.next = head2\n            head2 = head2.next\n        else:\n            s.next = head1\n            head1 = head1.next\n        s = s.next\n    s.next = head1 or head2\n    return c.next\n\n","score":1.0,"language":"python3"}],"teams":[],"contest_participations":[{"jobs_consent":None,"contest":"Master"},{"jobs_consent":None,"contest":"RookieRank 4"},{"jobs_consent":None,"contest":"101 Hack 55"},{"jobs_consent":None,"contest":"HourRank 29"},{"jobs_consent":None,"contest":"Week of Code 38"},{"jobs_consent":None,"contest":"Moody's Analytics 2018 University CodeSprint"}],"forum_comments":[{"contest":"Master","challenge":"Equalize the Array","description":"one-liner:\n```\ndef equalizeArray(arr):\n    return n-arr.count(max(set(arr),key=arr.count))\n```\n","upvotes":0,"downvotes":0},{"contest":"Master","challenge":"Absolute Permutation","description":"works :)\n\ndef absolutePermutation(n, k):\n    sol=[]\n    if not k: return range(1,n+1) #Case k=0\n    if n%(2*k): return [-1] #Impossible Permutation if n is not twice k\n    for i in range(1,n+1):\n        sol.append(i+k)\n        if i%k==0: k=-k #Change sign after k times\n    return sol","upvotes":0,"downvotes":0},{"contest":"Master","challenge":"Absolute Permutation","description":"Works :)\n\n```\ndef absolutePermutation(n, k):\n    sol=[]\n    if not k: return range(1,n+1) #Case k=0\n    if n%(2*k): return [-1] #Impossible Permutation if n is not twice k\n    for i in range(1,n+1):\n        sol.append(i+k)\n        if i%k==0: k=-k #Change sign after k times\n    return sol\n```\n\n","upvotes":0,"downvotes":0},{"contest":"Master","challenge":"Ema's Supercomputer","description":"There is a bug in testcase nr 5, there are 2 pluses which one is 17 and second is 5 and its 85 not 81 here is the screen from testcase in xls\nhttps://ibb.co/kMfgEz","upvotes":0,"downvotes":0}],"all_ratings":[],"contest_medals":[],"survey_results":[],"messages_sent":[{"receiver":"pmnox","message":{"id":935928,"sender_id":4345937,"receiver_id":217318,"message":"To aż smieszne :)  pierwszy nick który wpisałem to pmnox nie wiem czemu Cie zapamietalem po tylu latach ale widocznie mi zaimponowales. Pozdrawiam kolege z bright-shadows.net btw ucze sie pythona i pykam challenge w miare jak mi pozwala rodzina i praca :)","message_thread_id":199903,"created_at":"2018-07-01T21:12:51.000Z","updated_at":"2018-10-18T18:00:43.000Z","status":1}}],"run_codes":[],"contests_created":[],"job_applications":[],"skills_test":[]}